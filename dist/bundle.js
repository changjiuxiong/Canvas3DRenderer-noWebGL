!function(t){var c={};function n(g){if(c[g])return c[g].exports;var r=c[g]={i:g,l:!1,exports:{}};return t[g].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=c,n.d=function(t,c,g){n.o(t,c)||Object.defineProperty(t,c,{enumerable:!0,get:g})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,c){if(1&c&&(t=n(t)),8&c)return t;if(4&c&&"object"==typeof t&&t&&t.__esModule)return t;var g=Object.create(null);if(n.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:t}),2&c&&"string"!=typeof t)for(var r in t)n.d(g,r,function(c){return t[c]}.bind(null,r));return g},n.n=function(t){var c=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(c,"a",c),c},n.o=function(t,c){return Object.prototype.hasOwnProperty.call(t,c)},n.p="",n(n.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/material/Material.js\n\r\nclass Material {\r\n    constructor(param) {\r\n        param = param || {};\r\n        this.type = 'Material';\r\n        this.map = param.map;\r\n        this.envMap = param.envMap;\r\n        this.color = param.color || [1,1,1,1];\r\n        this.opacity = this.color[3];\r\n        if(this.color[3] && this.color[3]<1){\r\n            this.transparent = true;\r\n        }else {\r\n            this.transparent = false;\r\n        }\r\n        this.metalness = param.metalness == undefined ? 0.5 : param.metalness;\r\n\r\n        this.wireframe = param.wireframe == undefined ? false : param.wireframe;\r\n\r\n        var VSHADER_SOURCE =\r\n\r\n            'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'attribute vec4 a_Position;\\n' +\r\n            'uniform mat4 u_MvMatrix;\\n' +\r\n            'uniform mat4 u_PMatrix;\\n' +\r\n\r\n            '#ifdef USE_Shadow\\n' +\r\n            'uniform mat4 u_PMatrixFromLight;\\n' +\r\n            'varying vec4 v_PositionFromLight;\\n' +\r\n            '#endif\\n' +\r\n\r\n            'attribute vec2 a_TexCoord;\\n' +\r\n            'varying vec2 v_TexCoord;\\n' +\r\n            'attribute vec3 a_Normal;\\n' +\r\n            'varying vec3 v_Normal;\\n' +\r\n\r\n            '#ifdef USE_SColor\\n' +\r\n            'varying vec3 v_PositionV3;\\n' +\r\n            '#else\\n' +\r\n            '   #ifdef USE_envMap\\n' +\r\n            '   varying vec3 v_PositionV3;\\n' +\r\n            '   #endif\\n' +\r\n            '#endif\\n' +\r\n\r\n            'void main() {\\n' +\r\n            '  vec4 positionV4 = u_PMatrix * u_MvMatrix * a_Position;\\n' +\r\n            '  gl_Position = positionV4;\\n' +\r\n            '  v_TexCoord = a_TexCoord;\\n' +\r\n            '  v_Normal = mat3(u_MvMatrix) * a_Normal;\\n' +\r\n            // '  v_Normal = (u_MvMatrix * vec4(a_Normal, 0.0)).xyz;\\n' +\r\n            // '  v_Normal = a_Normal;\\n' +\r\n\r\n            '#ifdef USE_Shadow\\n' +\r\n            '  v_PositionFromLight = u_PMatrixFromLight * u_MvMatrix * a_Position;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_SColor\\n' +\r\n            '  vec4 positionV4Rel = u_MvMatrix * a_Position;\\n' +\r\n            '  v_PositionV3 = positionV4Rel.xyz / positionV4Rel.w;\\n' +\r\n            '#else\\n' +\r\n            '   #ifdef USE_envMap\\n' +\r\n            '   vec4 positionV4Rel = u_MvMatrix * a_Position;\\n' +\r\n            '   v_PositionV3 = positionV4Rel.xyz / positionV4Rel.w;\\n' +\r\n            '   #endif\\n' +\r\n            '#endif\\n' +\r\n\r\n            '}\\n';\r\n\r\n        var FSHADER_SOURCE =\r\n            'precision highp int;\\n' +\r\n            'precision highp float;\\n' +\r\n            'uniform vec4 u_Color;\\n' +\r\n            'varying vec2 v_TexCoord;\\n' +\r\n            'varying vec3 v_Normal;\\n' +\r\n\r\n            'uniform float u_Metalness;\\n' +\r\n\r\n            '#ifdef USE_Map\\n' +\r\n            'uniform sampler2D u_Sampler;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_envMap\\n' +\r\n            'uniform samplerCube u_envMap;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_AmbientLight\\n' +\r\n            'uniform vec3 u_AmbientLight_Color;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_DirectionalLight\\n' +\r\n            'uniform vec3 u_DirectionalLight_Direction;\\n' +\r\n            'uniform vec3 u_DirectionalLight_Color;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_SColor\\n' +\r\n            'uniform vec3 u_Camera_Position;\\n' +\r\n            'varying vec3 v_PositionV3;\\n' +\r\n            '#else\\n' +\r\n            '   #ifdef USE_envMap\\n' +\r\n            '   uniform vec3 u_Camera_Position;\\n' +\r\n            '   varying vec3 v_PositionV3;\\n' +\r\n            '   #endif\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_Shadow\\n' +\r\n            'uniform sampler2D u_ShadowMap;\\n' +\r\n            'varying vec4 v_PositionFromLight;\\n' +\r\n\r\n            'float unpackDepth(const in vec4 rgbaDepth) {\\n' +\r\n            '  const vec4 bitShift = vec4(1.0, 1.0/256.0, 1.0/(256.0*256.0), 1.0/(256.0*256.0*256.0));\\n' +\r\n            '  float depth = dot(rgbaDepth, bitShift);\\n' + // Use dot() since the calculations is same\r\n            '  return depth;\\n' +\r\n            '}\\n' +\r\n\r\n            '#endif\\n' +\r\n\r\n            'void main() {\\n' +\r\n            '  vec4 color = u_Color;\\n' +\r\n            '  vec3 v_Normal0 = normalize(v_Normal);\\n' +\r\n\r\n            '#ifdef USE_Map\\n' +\r\n            '  color = texture2D(u_Sampler, v_TexCoord);\\n' +\r\n            '#endif\\n' +\r\n\r\n            '  vec3 colorV3 = color.rgb;\\n' +\r\n            '  float useLight = 0.0;\\n' +\r\n            '  vec3 finalColorV3 = colorV3.rgb;\\n' +\r\n\r\n            '#ifdef USE_AmbientLight\\n' +\r\n            '  vec3 A_color = colorV3 * u_AmbientLight_Color * 0.5;\\n' +\r\n            '  finalColorV3 = A_color;\\n' +\r\n            '  useLight = 1.0;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_DirectionalLight\\n' +\r\n            '  float D_weight = max(dot(u_DirectionalLight_Direction, v_Normal0), 0.0);\\n' +\r\n            '  vec3 D_color = colorV3 * u_DirectionalLight_Color * D_weight * (1.0 - u_Metalness);\\n' +\r\n\r\n            '  if(useLight>0.5){\\n' +\r\n            '    finalColorV3 = finalColorV3 + D_color;\\n' +\r\n            '  }else{\\n' +\r\n            '    finalColorV3 = D_color;\\n' +\r\n            '  }\\n' +\r\n            '  useLight = 1.0;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '#ifdef USE_SColor\\n' +\r\n            '  vec3 r = normalize( reflect(-u_DirectionalLight_Direction, v_Normal0) );\\n' +\r\n            '  vec3 v = normalize( u_Camera_Position - v_PositionV3 );\\n' +\r\n            '  float rdotv = max( dot(r ,v), 0.0 );\\n' +\r\n            '  float S_weight = pow( rdotv, 100.0 );\\n' +\r\n            '  vec3 S_color = colorV3 * u_DirectionalLight_Color * S_weight * u_Metalness;\\n' +\r\n\r\n            '  if(useLight>0.5){\\n' +\r\n            '    finalColorV3 = finalColorV3 + S_color;\\n' +\r\n            '  }else{\\n' +\r\n            '    finalColorV3 = S_color;\\n' +\r\n            '  }\\n' +\r\n            '  useLight = 1.0;\\n' +\r\n            '#endif\\n' +\r\n\r\n            '  color = vec4(finalColorV3, color.a);\\n' +\r\n\r\n            '#ifdef USE_envMap\\n' +\r\n            // '   vec3 v1 = normalize( u_Camera_Position - v_PositionV3 );\\n' +\r\n            // '   vec3 r1 = normalize( reflect(v1, v_Normal0) );\\n' +\r\n            '   vec3 v1 = u_Camera_Position - v_PositionV3;\\n' +\r\n            '   vec3 r1 = reflect(-v1, v_Normal0);\\n' +\r\n\r\n            '   vec4 envMapColor = textureCube(u_envMap, r1);\\n' +\r\n            // '   vec3 ref = v1 - 2.0 * dot(v_Normal0, v1) * v_Normal0;\\n'+\r\n            // '   vec4 envMapColor = textureCube(u_envMap, ref);\\n' +\r\n            '   color = vec4(envMapColor.rgb, color.a);\\n' +\r\n            '#endif\\n' +\r\n\r\n\r\n            '#ifdef USE_Shadow\\n' +\r\n            '  vec3 shadowCoord = (v_PositionFromLight.xyz/v_PositionFromLight.w)/2.0 + 0.5;\\n' +\r\n            '  vec4 rgbaDepth = texture2D(u_ShadowMap, shadowCoord.xy);\\n' +\r\n            '  float depth = unpackDepth(rgbaDepth);\\n' +\r\n            '  float visibility = (shadowCoord.z > depth + 0.0015) ? 0.7 : 1.0;\\n' +\r\n            '  color = vec4(color.rgb * visibility, color.a);\\n' +\r\n            '#endif\\n' +\r\n\r\n            '  gl_FragColor = color;\\n' +\r\n\r\n            '}\\n';\r\n\r\n        this.vshaderSource = VSHADER_SOURCE;\r\n        this.fshaderSource = FSHADER_SOURCE;\r\n    }\r\n\r\n    setOpacity(opacity){\r\n        this.opacity = opacity;\r\n        this.color[3] = opacity;\r\n        this.transparent = opacity<1;\r\n    }\r\n\r\n    clone(){\r\n\r\n        var material = new Material({\r\n            map: this.map,\r\n            color: this.color.slice(0)\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_Material = (Material);\r\n\n// CONCATENATED MODULE: ./src/math/Math.js\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar _Math = {\r\n\r\n\tDEG2RAD: Math.PI / 180,\r\n\tRAD2DEG: 180 / Math.PI,\r\n\r\n\tgenerateUUID: ( function () {\r\n\r\n\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n\t\tvar lut = [];\r\n\r\n\t\tfor ( var i = 0; i < 256; i ++ ) {\r\n\r\n\t\t\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\r\n\r\n\t\t}\r\n\r\n\t\treturn function generateUUID() {\r\n\r\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\r\n\t\t\t\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\r\n\t\t\t\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\r\n\t\t\t\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\r\n\r\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\r\n\t\t\treturn uuid.toUpperCase();\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tclamp: function ( value, min, max ) {\r\n\r\n\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t},\r\n\r\n\t// compute euclidian modulo of m % n\r\n\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t},\r\n\r\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t},\r\n\r\n\t// https://en.wikipedia.org/wiki/Linear_interpolation\r\n\r\n\tlerp: function ( x, y, t ) {\r\n\r\n\t\treturn ( 1 - t ) * x + t * y;\r\n\r\n\t},\r\n\r\n\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t},\r\n\r\n\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t},\r\n\r\n\t// Random integer from <low, high> interval\r\n\r\n\trandInt: function ( low, high ) {\r\n\r\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t},\r\n\r\n\t// Random float from <low, high> interval\r\n\r\n\trandFloat: function ( low, high ) {\r\n\r\n\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t},\r\n\r\n\t// Random float from <-range/2, range/2> interval\r\n\r\n\trandFloatSpread: function ( range ) {\r\n\r\n\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t},\r\n\r\n\tdegToRad: function ( degrees ) {\r\n\r\n\t\treturn degrees * _Math.DEG2RAD;\r\n\r\n\t},\r\n\r\n\tradToDeg: function ( radians ) {\r\n\r\n\t\treturn radians * _Math.RAD2DEG;\r\n\r\n\t},\r\n\r\n\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t},\r\n\r\n\tceilPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t},\r\n\r\n\tfloorPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Quaternion.js\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\n\r\n\r\n\r\nfunction Quaternion( x, y, z, w ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n}\r\n\r\nObject.assign( Quaternion, {\r\n\r\n\tslerp: function ( qa, qb, qm, t ) {\r\n\r\n\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t},\r\n\r\n\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n} );\r\n\r\nObject.defineProperties( Quaternion.prototype, {\r\n\r\n\tx: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._x;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._x = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ty: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._y;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._y = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tz: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._z;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._z = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tw: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._w;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._w = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nObject.assign( Quaternion.prototype, {\r\n\r\n\tisQuaternion: true,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\tthrow new Error( 'COOL.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tvar cos = Math.cos;\r\n\t\tvar sin = Math.sin;\r\n\r\n\t\tvar c1 = cos( x / 2 );\r\n\t\tvar c2 = cos( y / 2 );\r\n\t\tvar c3 = cos( z / 2 );\r\n\r\n\t\tvar s1 = sin( x / 2 );\r\n\t\tvar s2 = sin( y / 2 );\r\n\t\tvar s3 = sin( z / 2 );\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t}\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\ts;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromUnitVectors: function () {\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tvar v1 = new Vector3();\r\n\t\tvar r;\r\n\r\n\t\tvar EPS = 0.000001;\r\n\r\n\t\treturn function setFromUnitVectors( vFrom, vTo ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new Vector3();\r\n\r\n\t\t\tr = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tv1.crossVectors( vFrom, vTo );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._x = v1.x;\r\n\t\t\tthis._y = v1.y;\r\n\t\t\tthis._z = v1.z;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tangleTo: function ( q ) {\r\n\r\n\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t},\r\n\r\n\trotateTowards: function ( q, step ) {\r\n\r\n\t\tvar angle = this.angleTo( q );\r\n\r\n\t\tif ( angle === 0 ) return this;\r\n\r\n\t\tvar t = Math.min( 1, step / angle );\r\n\r\n\t\tthis.slerp( q, t );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tinverse: function () {\r\n\r\n\t\t// quaternion is assumed to have unit length\r\n\r\n\t\treturn this.conjugate();\r\n\r\n\t},\r\n\r\n\tconjugate: function () {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tvar l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t},\r\n\r\n\tpremultiply: function ( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t},\r\n\r\n\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tslerp: function ( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\tvar s = 1 - t;\r\n\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t}\r\n\r\n\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Vector3.js\n\r\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nfunction Vector3( x, y, z ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\r\n}\r\n\r\nObject.assign( Vector3.prototype, {\r\n\r\n\tisVector3: true,\r\n\r\n\tset: function ( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n    scaleVectors :function(v1,scale){\r\n        return new Vector3(v1.x*scale, v1.y*scale, v1.z*scale );\r\n    },\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyEuler: function () {\r\n\r\n\t\tvar quaternion = new Quaternion();\r\n\r\n\t\treturn function applyEuler( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'COOL.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyAxisAngle: function () {\r\n\r\n\t\tvar quaternion = new Quaternion();\r\n\r\n\t\treturn function applyAxisAngle( axis, angle ) {\r\n\r\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tvar ix = qw * x + qy * z - qz * y;\r\n\t\tvar iy = qw * y + qz * x - qx * z;\r\n\t\tvar iz = qw * z + qx * y - qy * x;\r\n\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tproject: function ( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t},\r\n\r\n\tunproject: function () {\r\n\r\n\t\tvar matrix = new Matrix4();\r\n\r\n\t\treturn function unproject( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( matrix.getInverse( camera.projectionMatrix ) ).applyMatrix4( camera.matrixWorld );\r\n            // return this.applyMatrix4( matrix.getInverse( camera.VPmatrix ) ); 等价\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttransformDirection: function ( m ) {\r\n\r\n\t\t// input: COOL.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min = new Vector3();\r\n\t\tvar max = new Vector3();\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t},\r\n\r\n\t// TODO lengthSquared?\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t},\r\n\r\n\tmanhattanLength: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tcross: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.crossVectors( this, v );\r\n\r\n\t},\r\n\r\n\tcrossVectors: function ( a, b ) {\r\n\r\n\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tprojectOnVector: function ( vector ) {\r\n\r\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\r\n\r\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\r\n\r\n\t},\r\n\r\n\tprojectOnPlane: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function projectOnPlane( planeNormal ) {\r\n\r\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( v1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\treflect: function () {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function reflect( normal ) {\r\n\r\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tangleTo: function ( v ) {\r\n\r\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t},\r\n\r\n\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t},\r\n\r\n\tsetFromSpherical: function ( s ) {\r\n\r\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t},\r\n\r\n\tsetFromSphericalCoords: function ( radius, phi, theta ) {\r\n\r\n\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCylindrical: function ( c ) {\r\n\r\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t},\r\n\r\n\tsetFromCylindricalCoords: function ( radius, theta, y ) {\r\n\r\n\t\tthis.x = radius * Math.sin( theta );\r\n\t\tthis.y = y;\r\n\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t},\r\n\r\n    rotateByVector :function(vec1, vec2, angle) {\r\n        var v1 = vec1.toArray();\r\n        var v2 = vec2.toArray();\r\n        angle = - angle;\r\n        var pos = [];\r\n        pos[0] = v1[0] * Math.cos(angle) + (v2[1] * v1[2] - v2[2] * v1[1]) * Math.sin(angle) + v2[0] * (v2[0] * v1[0] + v2[1] * v1[1] + v2[2] * v1[2]) * (1 - Math.cos(angle));\r\n        pos[1] = v1[1] * Math.cos(angle) + (v2[2] * v1[0] - v2[0] * v1[2]) * Math.sin(angle) + v2[1] * (v2[0] * v1[0] + v2[1] * v1[1] + v2[2] * v1[2]) * (1 - Math.cos(angle));\r\n        pos[2] = v1[2] * Math.cos(angle) + (v2[0] * v1[1] - v2[1] * v1[0]) * Math.sin(angle) + v2[2] * (v2[0] * v1[0] + v2[1] * v1[1] + v2[2] * v1[2]) * (1 - Math.cos(angle));\r\n        return new Vector3().fromArray(pos);\r\n    },\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector3: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Vector4.js\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nfunction Vector4( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n\tthis.elements = [this.x,this.y,this.z,this.w];\r\n}\r\n\r\nObject.assign( Vector4.prototype, {\r\n\r\n\tisVector4: true,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\t\tthis.w = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\t\tthis.w *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\tthis.x = 1;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = q.x / s;\r\n\t\t\tthis.y = q.y / s;\r\n\t\t\tthis.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new Vector4();\r\n\t\t\t\tmax = new Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tmanhattanLength: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector4: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\t\tthis.w = attribute.getW( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Matrix4.js\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nfunction Matrix4() {\r\n\r\n\tthis.elements = [\r\n\r\n\t\t1, 0, 0, 0,\r\n\t\t0, 1, 0, 0,\r\n\t\t0, 0, 1, 0,\r\n\t\t0, 0, 0, 1\r\n\r\n\t];\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'COOL.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject.assign( Matrix4.prototype, {\r\n\r\n\tisMatrix4: true,\r\n\r\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n    setIdentity :function() {\r\n        var e = this.elements;\r\n        e[0] = 1;   e[4] = 0;   e[8]  = 0;   e[12] = 0;\r\n        e[1] = 0;   e[5] = 1;   e[9]  = 0;   e[13] = 0;\r\n        e[2] = 0;   e[6] = 0;   e[10] = 1;   e[14] = 0;\r\n        e[3] = 0;   e[7] = 0;   e[11] = 0;   e[15] = 1;\r\n        return this;\r\n    },\r\n\r\n    multiplyVector3 :function(pos) {\r\n        var e = this.elements;\r\n        var p = pos.elements;\r\n        var v = new Vector3();\r\n        var result = v.elements;\r\n\r\n        result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + e[11];\r\n        result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + e[12];\r\n        result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + e[13];\r\n\r\n        return v;\r\n    },\r\n\r\n    multiplyVector4 :function(pos) {\r\n        var e = this.elements;\r\n        var p = pos.elements;\r\n        var v = new Vector4();\r\n        var result = v.elements;\r\n\r\n        result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + p[3] * e[12];\r\n        result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + p[3] * e[13];\r\n        result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + p[3] * e[14];\r\n        result[3] = p[0] * e[3] + p[1] * e[7] + p[2] * e[11] + p[3] * e[15];\r\n\r\n        v = new Vector4(result[0],result[1],result[2],result[3]);\r\n        return v;\r\n    },\r\n\r\n    setInverseOf :function(other) {\r\n        var i, s, d, inv, det;\r\n\r\n        s = other.elements;\r\n        d = this.elements;\r\n        inv = new Float32Array(16);\r\n\r\n        inv[0]  =   s[5]*s[10]*s[15] - s[5] *s[11]*s[14] - s[9] *s[6]*s[15]\r\n            + s[9]*s[7] *s[14] + s[13]*s[6] *s[11] - s[13]*s[7]*s[10];\r\n        inv[4]  = - s[4]*s[10]*s[15] + s[4] *s[11]*s[14] + s[8] *s[6]*s[15]\r\n            - s[8]*s[7] *s[14] - s[12]*s[6] *s[11] + s[12]*s[7]*s[10];\r\n        inv[8]  =   s[4]*s[9] *s[15] - s[4] *s[11]*s[13] - s[8] *s[5]*s[15]\r\n            + s[8]*s[7] *s[13] + s[12]*s[5] *s[11] - s[12]*s[7]*s[9];\r\n        inv[12] = - s[4]*s[9] *s[14] + s[4] *s[10]*s[13] + s[8] *s[5]*s[14]\r\n            - s[8]*s[6] *s[13] - s[12]*s[5] *s[10] + s[12]*s[6]*s[9];\r\n\r\n        inv[1]  = - s[1]*s[10]*s[15] + s[1] *s[11]*s[14] + s[9] *s[2]*s[15]\r\n            - s[9]*s[3] *s[14] - s[13]*s[2] *s[11] + s[13]*s[3]*s[10];\r\n        inv[5]  =   s[0]*s[10]*s[15] - s[0] *s[11]*s[14] - s[8] *s[2]*s[15]\r\n            + s[8]*s[3] *s[14] + s[12]*s[2] *s[11] - s[12]*s[3]*s[10];\r\n        inv[9]  = - s[0]*s[9] *s[15] + s[0] *s[11]*s[13] + s[8] *s[1]*s[15]\r\n            - s[8]*s[3] *s[13] - s[12]*s[1] *s[11] + s[12]*s[3]*s[9];\r\n        inv[13] =   s[0]*s[9] *s[14] - s[0] *s[10]*s[13] - s[8] *s[1]*s[14]\r\n            + s[8]*s[2] *s[13] + s[12]*s[1] *s[10] - s[12]*s[2]*s[9];\r\n\r\n        inv[2]  =   s[1]*s[6]*s[15] - s[1] *s[7]*s[14] - s[5] *s[2]*s[15]\r\n            + s[5]*s[3]*s[14] + s[13]*s[2]*s[7]  - s[13]*s[3]*s[6];\r\n        inv[6]  = - s[0]*s[6]*s[15] + s[0] *s[7]*s[14] + s[4] *s[2]*s[15]\r\n            - s[4]*s[3]*s[14] - s[12]*s[2]*s[7]  + s[12]*s[3]*s[6];\r\n        inv[10] =   s[0]*s[5]*s[15] - s[0] *s[7]*s[13] - s[4] *s[1]*s[15]\r\n            + s[4]*s[3]*s[13] + s[12]*s[1]*s[7]  - s[12]*s[3]*s[5];\r\n        inv[14] = - s[0]*s[5]*s[14] + s[0] *s[6]*s[13] + s[4] *s[1]*s[14]\r\n            - s[4]*s[2]*s[13] - s[12]*s[1]*s[6]  + s[12]*s[2]*s[5];\r\n\r\n        inv[3]  = - s[1]*s[6]*s[11] + s[1]*s[7]*s[10] + s[5]*s[2]*s[11]\r\n            - s[5]*s[3]*s[10] - s[9]*s[2]*s[7]  + s[9]*s[3]*s[6];\r\n        inv[7]  =   s[0]*s[6]*s[11] - s[0]*s[7]*s[10] - s[4]*s[2]*s[11]\r\n            + s[4]*s[3]*s[10] + s[8]*s[2]*s[7]  - s[8]*s[3]*s[6];\r\n        inv[11] = - s[0]*s[5]*s[11] + s[0]*s[7]*s[9]  + s[4]*s[1]*s[11]\r\n            - s[4]*s[3]*s[9]  - s[8]*s[1]*s[7]  + s[8]*s[3]*s[5];\r\n        inv[15] =   s[0]*s[5]*s[10] - s[0]*s[6]*s[9]  - s[4]*s[1]*s[10]\r\n            + s[4]*s[2]*s[9]  + s[8]*s[1]*s[6]  - s[8]*s[2]*s[5];\r\n\r\n        det = s[0]*inv[0] + s[1]*inv[4] + s[2]*inv[8] + s[3]*inv[12];\r\n        if (det === 0) {\r\n            return this;\r\n        }\r\n\r\n        det = 1 / det;\r\n        for (i = 0; i < 16; i++) {\r\n            d[i] = inv[i] * det;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    invert :function() {\r\n        return this.setInverseOf(this);\r\n    },\r\n\r\n    ortho :function(left, right, bottom, top, near, far) {\r\n        return this.concat(new Matrix4().setOrtho(left, right, bottom, top, near, far));\r\n    },\r\n\r\n    setFrustum :function(left, right, bottom, top, near, far) {\r\n        var e, rw, rh, rd;\r\n\r\n        if (left === right || top === bottom || near === far) {\r\n            throw 'null frustum';\r\n        }\r\n        if (near <= 0) {\r\n            throw 'near <= 0';\r\n        }\r\n        if (far <= 0) {\r\n            throw 'far <= 0';\r\n        }\r\n\r\n        rw = 1 / (right - left);\r\n        rh = 1 / (top - bottom);\r\n        rd = 1 / (far - near);\r\n\r\n        e = this.elements;\r\n\r\n        e[ 0] = 2 * near * rw;\r\n        e[ 1] = 0;\r\n        e[ 2] = 0;\r\n        e[ 3] = 0;\r\n\r\n        e[ 4] = 0;\r\n        e[ 5] = 2 * near * rh;\r\n        e[ 6] = 0;\r\n        e[ 7] = 0;\r\n\r\n        e[ 8] = (right + left) * rw;\r\n        e[ 9] = (top + bottom) * rh;\r\n        e[10] = -(far + near) * rd;\r\n        e[11] = -1;\r\n\r\n        e[12] = 0;\r\n        e[13] = 0;\r\n        e[14] = -2 * near * far * rd;\r\n        e[15] = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    setOrtho :function(left, right, bottom, top, near, far) {\r\n        var e, rw, rh, rd;\r\n\r\n        if (left === right || bottom === top || near === far) {\r\n            throw 'null frustum';\r\n        }\r\n\r\n        rw = 1 / (right - left);\r\n        rh = 1 / (top - bottom);\r\n        rd = 1 / (far - near);\r\n\r\n        e = this.elements;\r\n\r\n        e[0]  = 2 * rw;\r\n        e[1]  = 0;\r\n        e[2]  = 0;\r\n        e[3]  = 0;\r\n\r\n        e[4]  = 0;\r\n        e[5]  = 2 * rh;\r\n        e[6]  = 0;\r\n        e[7]  = 0;\r\n\r\n        e[8]  = 0;\r\n        e[9]  = 0;\r\n        e[10] = -2 * rd;\r\n        e[11] = 0;\r\n\r\n        e[12] = -(right + left) * rw;\r\n        e[13] = -(top + bottom) * rh;\r\n        e[14] = -(far + near) * rd;\r\n        e[15] = 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    concat :function(other) {\r\n        var i, e, a, b, ai0, ai1, ai2, ai3;\r\n\r\n        // Calculate e = a * b\r\n        e = this.elements;\r\n        a = this.elements;\r\n        b = other.elements;\r\n\r\n        // If e equals b, copy b to temporary matrix.\r\n        if (e === b) {\r\n            b = new Float32Array(16);\r\n            for (i = 0; i < 16; ++i) {\r\n                b[i] = e[i];\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < 4; i++) {\r\n            ai0=a[i];  ai1=a[i+4];  ai2=a[i+8];  ai3=a[i+12];\r\n            e[i]    = ai0 * b[0]  + ai1 * b[1]  + ai2 * b[2]  + ai3 * b[3];\r\n            e[i+4]  = ai0 * b[4]  + ai1 * b[5]  + ai2 * b[6]  + ai3 * b[7];\r\n            e[i+8]  = ai0 * b[8]  + ai1 * b[9]  + ai2 * b[10] + ai3 * b[11];\r\n            e[i+12] = ai0 * b[12] + ai1 * b[13] + ai2 * b[14] + ai3 * b[15];\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    frustum :function(left, right, bottom, top, near, far) {\r\n        return this.concat(new Matrix4().setFrustum(left, right, bottom, top, near, far));\r\n    },\r\n\r\n    setPerspective :function(fovy, aspect, near, far) {\r\n        var e, rd, s, ct;\r\n\r\n        if (near === far || aspect === 0) {\r\n            throw 'null frustum';\r\n        }\r\n        if (near <= 0) {\r\n            throw 'near <= 0';\r\n        }\r\n        if (far <= 0) {\r\n            throw 'far <= 0';\r\n        }\r\n\r\n        fovy = Math.PI * fovy / 180 / 2;\r\n        s = Math.sin(fovy);\r\n        if (s === 0) {\r\n            throw 'null frustum';\r\n        }\r\n\r\n        rd = 1 / (far - near);\r\n        ct = Math.cos(fovy) / s;\r\n\r\n        e = this.elements;\r\n\r\n        e[0]  = ct / aspect;\r\n        e[1]  = 0;\r\n        e[2]  = 0;\r\n        e[3]  = 0;\r\n\r\n        e[4]  = 0;\r\n        e[5]  = ct;\r\n        e[6]  = 0;\r\n        e[7]  = 0;\r\n\r\n        e[8]  = 0;\r\n        e[9]  = 0;\r\n        e[10] = -(far + near) * rd;\r\n        e[11] = -1;\r\n\r\n        e[12] = 0;\r\n        e[13] = 0;\r\n        e[14] = -2 * near * far * rd;\r\n        e[15] = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    perspective :function(fovy, aspect, near, far) {\r\n        return this.concat(new Matrix4().setPerspective(fovy, aspect, near, far));\r\n    },\r\n\r\n    setScale :function(x, y, z) {\r\n        var e = this.elements;\r\n        e[0] = x;  e[4] = 0;  e[8]  = 0;  e[12] = 0;\r\n        e[1] = 0;  e[5] = y;  e[9]  = 0;  e[13] = 0;\r\n        e[2] = 0;  e[6] = 0;  e[10] = z;  e[14] = 0;\r\n        e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        return this;\r\n    },\r\n\r\n    scale :function(x, y, z) {\r\n        var e = this.elements;\r\n        e[0] *= x;  e[4] *= y;  e[8]  *= z;\r\n        e[1] *= x;  e[5] *= y;  e[9]  *= z;\r\n        e[2] *= x;  e[6] *= y;  e[10] *= z;\r\n        e[3] *= x;  e[7] *= y;  e[11] *= z;\r\n        return this;\r\n    },\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyPosition: function ( m ) {\r\n\r\n\t\tvar te = this.elements, me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractRotation: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function extractRotation( m ) {\r\n\r\n\t\t\t// this method does not support reflection matrices\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\tconsole.error( 'COOL.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// bottom row\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// last column\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationFromQuaternion: function () {\r\n\r\n\t\tvar zero = new Vector3( 0, 0, 0 );\r\n\t\tvar one = new Vector3( 1, 1, 1 );\r\n\r\n\t\treturn function makeRotationFromQuaternion( q ) {\r\n\r\n\t\t\treturn this.compose( zero, q, one );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar x = new Vector3();\r\n\t\tvar y = new Vector3();\r\n\t\tvar z = new Vector3();\r\n\r\n\t\treturn function lookAt( eye, target, up ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tz.subVectors( eye, target );\r\n\r\n\t\t\tif ( z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t\tz.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tz.normalize();\r\n\t\t\tx.crossVectors( up, z );\r\n\r\n\t\t\tif ( x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// up and z are parallel\r\n\r\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t\tz.x += 0.0001;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz.z += 0.0001;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tz.normalize();\r\n\t\t\t\tx.crossVectors( up, z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tx.normalize();\r\n\t\t\ty.crossVectors( z, x );\r\n\r\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\r\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\r\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiply: function ( m, n ) {\r\n\r\n\t\tif ( n !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tpremultiply: function ( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyToBufferAttribute: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function applyToBufferAttribute( attribute ) {\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tv1.x = attribute.getX( i );\r\n\t\t\t\tv1.y = attribute.getY( i );\r\n\t\t\t\tv1.z = attribute.getZ( i );\r\n\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\r\n\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetPosition: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 12 ] = v.x;\r\n\t\tte[ 13 ] = v.y;\r\n\t\tte[ 14 ] = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tvar te = this.elements,\r\n\t\t\tme = m.elements,\r\n\r\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"COOL.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.identity();\r\n\r\n\t\t}\r\n\r\n\t\tvar detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 4 ] = t12 * detInv;\r\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 8 ] = t13 * detInv;\r\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\tte[ 12 ] = t14 * detInv;\r\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tscale: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n    setTranslate :function(x, y, z) {\r\n        var e = this.elements;\r\n        e[0] = 1;  e[4] = 0;  e[8]  = 0;  e[12] = x;\r\n        e[1] = 0;  e[5] = 1;  e[9]  = 0;  e[13] = y;\r\n        e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = z;\r\n        e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        return this;\r\n    },\r\n\r\n    translate :function(x, y, z) {\r\n        var e = this.elements;\r\n        e[12] += e[0] * x + e[4] * y + e[8]  * z;\r\n        e[13] += e[1] * x + e[5] * y + e[9]  * z;\r\n        e[14] += e[2] * x + e[6] * y + e[10] * z;\r\n        e[15] += e[3] * x + e[7] * y + e[11] * z;\r\n        return this;\r\n    },\r\n\r\n    setRotate :function(angle, x, y, z) {\r\n        var e, s, c, len, rlen, nc, xy, yz, zx, xs, ys, zs;\r\n\r\n        angle = Math.PI * angle / 180;\r\n        e = this.elements;\r\n\r\n        s = Math.sin(angle);\r\n        c = Math.cos(angle);\r\n\r\n        if (0 !== x && 0 === y && 0 === z) {\r\n            // Rotation around X axis\r\n            if (x < 0) {\r\n                s = -s;\r\n            }\r\n            e[0] = 1;  e[4] = 0;  e[ 8] = 0;  e[12] = 0;\r\n            e[1] = 0;  e[5] = c;  e[ 9] =-s;  e[13] = 0;\r\n            e[2] = 0;  e[6] = s;  e[10] = c;  e[14] = 0;\r\n            e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        } else if (0 === x && 0 !== y && 0 === z) {\r\n            // Rotation around Y axis\r\n            if (y < 0) {\r\n                s = -s;\r\n            }\r\n            e[0] = c;  e[4] = 0;  e[ 8] = s;  e[12] = 0;\r\n            e[1] = 0;  e[5] = 1;  e[ 9] = 0;  e[13] = 0;\r\n            e[2] =-s;  e[6] = 0;  e[10] = c;  e[14] = 0;\r\n            e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        } else if (0 === x && 0 === y && 0 !== z) {\r\n            // Rotation around Z axis\r\n            if (z < 0) {\r\n                s = -s;\r\n            }\r\n            e[0] = c;  e[4] =-s;  e[ 8] = 0;  e[12] = 0;\r\n            e[1] = s;  e[5] = c;  e[ 9] = 0;  e[13] = 0;\r\n            e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = 0;\r\n            e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n        } else {\r\n            // Rotation around another axis\r\n            len = Math.sqrt(x*x + y*y + z*z);\r\n            if (len !== 1) {\r\n                rlen = 1 / len;\r\n                x *= rlen;\r\n                y *= rlen;\r\n                z *= rlen;\r\n            }\r\n            nc = 1 - c;\r\n            xy = x * y;\r\n            yz = y * z;\r\n            zx = z * x;\r\n            xs = x * s;\r\n            ys = y * s;\r\n            zs = z * s;\r\n\r\n            e[ 0] = x*x*nc +  c;\r\n            e[ 1] = xy *nc + zs;\r\n            e[ 2] = zx *nc - ys;\r\n            e[ 3] = 0;\r\n\r\n            e[ 4] = xy *nc - zs;\r\n            e[ 5] = y*y*nc +  c;\r\n            e[ 6] = yz *nc + xs;\r\n            e[ 7] = 0;\r\n\r\n            e[ 8] = zx *nc + ys;\r\n            e[ 9] = yz *nc - xs;\r\n            e[10] = z*z*nc +  c;\r\n            e[11] = 0;\r\n\r\n            e[12] = 0;\r\n            e[13] = 0;\r\n            e[14] = 0;\r\n            e[15] = 1;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    rotate :function(angle, x, y, z) {\r\n        return this.concat(new Matrix4().setRotate(angle, x, y, z));\r\n    },\r\n\r\n    setLookAt :function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {\r\n        var e, fx, fy, fz, rlf, sx, sy, sz, rls, ux, uy, uz;\r\n\r\n        fx = centerX - eyeX;\r\n        fy = centerY - eyeY;\r\n        fz = centerZ - eyeZ;\r\n\r\n        // Normalize f.\r\n        rlf = 1 / Math.sqrt(fx*fx + fy*fy + fz*fz);\r\n        fx *= rlf;\r\n        fy *= rlf;\r\n        fz *= rlf;\r\n\r\n        // Calculate cross product of f and up.\r\n        sx = fy * upZ - fz * upY;\r\n        sy = fz * upX - fx * upZ;\r\n        sz = fx * upY - fy * upX;\r\n\r\n        // Normalize s.\r\n        rls = 1 / Math.sqrt(sx*sx + sy*sy + sz*sz);\r\n        sx *= rls;\r\n        sy *= rls;\r\n        sz *= rls;\r\n\r\n        // Calculate cross product of s and f.\r\n        ux = sy * fz - sz * fy;\r\n        uy = sz * fx - sx * fz;\r\n        uz = sx * fy - sy * fx;\r\n\r\n        // Set to this.\r\n        e = this.elements;\r\n        e[0] = sx;\r\n        e[1] = ux;\r\n        e[2] = -fx;\r\n        e[3] = 0;\r\n\r\n        e[4] = sy;\r\n        e[5] = uy;\r\n        e[6] = -fy;\r\n        e[7] = 0;\r\n\r\n        e[8] = sz;\r\n        e[9] = uz;\r\n        e[10] = -fz;\r\n        e[11] = 0;\r\n\r\n        e[12] = 0;\r\n        e[13] = 0;\r\n        e[14] = 0;\r\n        e[15] = 1;\r\n\r\n        // Translate.\r\n        return this.translate(-eyeX, -eyeY, -eyeZ);\r\n    },\r\n\r\n    lookAt2 :function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {\r\n        return this.concat(new Matrix4().setLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ));\r\n    },\r\n\r\n\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t},\r\n\r\n\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationX: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s, c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationY: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts, c, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar t = 1 - c;\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\t return this;\r\n\r\n\t},\r\n\r\n\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeShear: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, y, z, 0,\r\n\t\t\tx, 1, z, 0,\r\n\t\t\tx, y, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t        te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t        te[ 1 ] = ( xy + wz ) * sx;\r\n\t        te[ 2 ] = ( xz - wy ) * sx;\r\n\t        te[ 3 ] = 0;\r\n\r\n\t        te[ 4 ] = ( xy - wz ) * sy;\r\n\t        te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t        te[ 6 ] = ( yz + wx ) * sy;\r\n\t        te[ 7 ] = 0;\r\n\r\n\t        te[ 8 ] = ( xz + wy ) * sz;\r\n\t        te[ 9 ] = ( yz - wx ) * sz;\r\n\t        te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t        te[ 11 ] = 0;\r\n\r\n\t        te[ 12 ] = position.x;\r\n\t        te[ 13 ] = position.y;\r\n\t        te[ 14 ] = position.z;\r\n\t        te[ 15 ] = 1;\r\n\r\n\t        return this;\r\n\r\n\t},\r\n\r\n\tdecompose: function () {\r\n\r\n\t\tvar vector = new Vector3();\r\n\t\tvar matrix = new Matrix4();\r\n\r\n\t\treturn function decompose( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) sx = - sx;\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\t\t\tmatrix.copy( this );\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\tmatrix.elements[ 0 ] *= invSX;\r\n\t\t\tmatrix.elements[ 1 ] *= invSX;\r\n\t\t\tmatrix.elements[ 2 ] *= invSX;\r\n\r\n\t\t\tmatrix.elements[ 4 ] *= invSY;\r\n\t\t\tmatrix.elements[ 5 ] *= invSY;\r\n\t\t\tmatrix.elements[ 6 ] *= invSY;\r\n\r\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( matrix );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakePerspective: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tif ( far === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = 2 * near / ( right - left );\r\n\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\tvar a = ( right + left ) / ( right - left );\r\n\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar w = 1.0 / ( right - left );\r\n\t\tvar h = 1.0 / ( top - bottom );\r\n\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\tvar x = ( right + left ) * w;\r\n\t\tvar y = ( top + bottom ) * h;\r\n\t\tvar z = ( far + near ) * p;\r\n\r\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( matrix ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = matrix.elements;\r\n\r\n\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Euler.js\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nfunction Euler( x, y, z, order ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._order = order || Euler.DefaultOrder;\r\n\r\n}\r\n\r\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\nEuler.DefaultOrder = 'XYZ';\r\n\r\nObject.defineProperties( Euler.prototype, {\r\n\r\n\tx: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._x;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._x = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ty: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._y;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._y = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tz: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._z;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._z = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\torder: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this._order;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis._order = value;\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nObject.assign( Euler.prototype, {\r\n\r\n\tisEuler: true,\r\n\r\n\tset: function ( x, y, z, order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order || this._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t},\r\n\r\n\tcopy: function ( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\tvar clamp = _Math.clamp;\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements;\r\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\torder = order || this._order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'COOL.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromQuaternion: function () {\r\n\r\n\t\tvar matrix = new Matrix4();\r\n\r\n\t\treturn function setFromQuaternion( q, order, update ) {\r\n\r\n\t\t\tmatrix.makeRotationFromQuaternion( q );\r\n\r\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t},\r\n\r\n\treorder: function () {\r\n\r\n\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\tvar q = new Quaternion();\r\n\r\n\t\treturn function reorder( newOrder ) {\r\n\r\n\t\t\tq.setFromEuler( this );\r\n\r\n\t\t\treturn this.setFromQuaternion( q, newOrder );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\tif ( optionalResult ) {\r\n\r\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn new Vector3( this._x, this._y, this._z );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/core/Mesh.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Mesh_Mesh {\r\n    constructor(param) {\r\n        this.type = 'Mesh';\r\n        param = param || {};\r\n        this.geometry = param.geometry;\r\n        this.material = param.material || new material_Material();\r\n\r\n        this.position = param.position || [0,0,0];\r\n        this.rotation = param.rotation || new Euler();\r\n        this.scale = param.scale || [1,1,1];\r\n\r\n        this.quaternion = new Quaternion().setFromEuler( this.rotation, false );\r\n\r\n        this.children = [];\r\n        this.parent = null;\r\n\r\n        this.matrix = new Matrix4();\r\n        this.matrixWorld = new Matrix4();\r\n        this.updateMatrix();\r\n\r\n    }\r\n\r\n    setPosition(position){\r\n        this.position = position;\r\n        this.updateMatrix();\r\n    }\r\n\r\n    setRotation(rotationArray){\r\n        this.rotation = new Euler().fromArray(rotationArray);\r\n        var quaternion = new Quaternion().setFromEuler( this.rotation, false );\r\n        this.setQuaternion(quaternion);\r\n    }\r\n\r\n    setQuaternion(quaternion){\r\n\r\n        this.quaternion = quaternion;\r\n        this.rotation.setFromQuaternion( quaternion, undefined, false );\r\n        this.updateMatrix();\r\n    }\r\n\r\n    setScale(scaleArray){\r\n        this.scale = scaleArray;\r\n        this.updateMatrix();\r\n    }\r\n\r\n    updateMatrix(){\r\n        this.matrix.compose( new Vector3().fromArray(this.position), this.quaternion, new Vector3().fromArray(this.scale) );\r\n        this.updateMatrixWorld ();\r\n    }\r\n\r\n    setMatrix(matrix){\r\n        this.matrix = matrix;\r\n        this.updateMatrixWorld ();\r\n    }\r\n\r\n    updateMatrixWorld () {\r\n\r\n        // this.updateMatrix();\r\n\r\n        if ( this.parent === null ) {\r\n\r\n            this.matrixWorld = this.matrix.clone();\r\n\r\n        } else {\r\n\r\n            this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n        }\r\n\r\n        this.updateChildrenMatrixWorld();\r\n\r\n    }\r\n\r\n    getWorldPosition() {\r\n\r\n        var target = new Vector3();\r\n\r\n        // this.updateMatrixWorld();\r\n\r\n        return target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n    }\r\n\r\n    updateChildrenMatrixWorld(){\r\n\r\n        for(var i in this.children){\r\n            this.children[i].updateMatrixWorld();\r\n        }\r\n\r\n    }\r\n\r\n    clone(){\r\n        var mesh = new Mesh_Mesh({\r\n            geometry: this.geometry.clone(),\r\n            material: this.material.clone(),\r\n            position: this.position.slice(0),\r\n            rotation: this.rotation.clone(),\r\n            scale: this.scale.slice(0)\r\n        });\r\n\r\n        return mesh;\r\n    }\r\n\r\n    add(mesh){\r\n        this.children.push(mesh);\r\n        mesh.parent = this;\r\n        mesh.updateMatrix();\r\n    }\r\n\r\n    rotateOnAxis (axis, angle) {\r\n\r\n        var q1 = new Quaternion();\r\n        q1.setFromAxisAngle( axis, angle );\r\n        var quaternion = this.quaternion.multiply( q1 );\r\n        this.setQuaternion(quaternion);\r\n\r\n    }\r\n\r\n    rotateX (angle) {\r\n\r\n        this.rotateOnAxis( new Vector3(1,0,0), angle );\r\n\r\n    }\r\n\r\n    rotateY (angle) {\r\n\r\n        this.rotateOnAxis( new Vector3(0,1,0), angle );\r\n\r\n    }\r\n\r\n    rotateZ (angle) {\r\n\r\n        this.rotateOnAxis( new Vector3(0,0,1), angle );\r\n\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var core_Mesh = (Mesh_Mesh);\r\n\n// CONCATENATED MODULE: ./src/util/webgl-utils.js\n/*\r\n * Copyright 2010, Google Inc.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *     * Neither the name of Google Inc. nor the names of its\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n\r\n/**\r\n * @fileoverview This file contains functions every webgl program will need\r\n * a version of one way or another.\r\n *\r\n * Instead of setting up a context manually it is recommended to\r\n * use. This will check for success or failure. On failure it\r\n * will attempt to present an approriate message to the user.\r\n *\r\n *       gl = WebGLUtils.setupWebGL(canvas);\r\n *\r\n * For animated WebGL apps use of setTimeout or setInterval are\r\n * discouraged. It is recommended you structure your rendering\r\n * loop like this.\r\n *\r\n *       function render() {\r\n *         window.requestAnimationFrame(render, canvas);\r\n *\r\n *         // do rendering\r\n *         ...\r\n *       }\r\n *       render();\r\n *\r\n * This will call your rendering function up to the refresh rate\r\n * of your display but will stop rendering if your app is not\r\n * visible.\r\n */\r\n\r\nvar WebGLUtils = function() {\r\n\r\n/**\r\n * Creates the HTLM for a failure message\r\n * @param {string} canvasContainerId id of container of th\r\n *        canvas.\r\n * @return {string} The html.\r\n */\r\nvar makeFailHTML = function(msg) {\r\n  return '' +\r\n        '<div style=\"margin: auto; width:500px;z-index:10000;margin-top:20em;text-align:center;\">' + msg + '</div>';\r\n  return '' +\r\n    '<table style=\"background-color: #8CE; width: 100%; height: 100%;\"><tr>' +\r\n    '<td align=\"center\">' +\r\n    '<div style=\"display: table-cell; vertical-align: middle;\">' +\r\n    '<div style=\"\">' + msg + '</div>' +\r\n    '</div>' +\r\n    '</td></tr></table>';\r\n};\r\n\r\n/**\r\n * Mesasge for getting a webgl browser\r\n * @type {string}\r\n */\r\nvar GET_A_WEBGL_BROWSER = '' +\r\n  'This page requires a browser that supports WebGL.<br/>' +\r\n  '<a href=\"http://get.webgl.org\">Click here to upgrade your browser.</a>';\r\n\r\n/**\r\n * Mesasge for need better hardware\r\n * @type {string}\r\n */\r\nvar OTHER_PROBLEM = '' +\r\n  \"It doesn't appear your computer can support WebGL.<br/>\" +\r\n  '<a href=\"http://get.webgl.org\">Click here for more information.</a>';\r\n\r\n/**\r\n * Creates a webgl context. If creation fails it will\r\n * change the contents of the container of the <canvas>\r\n * tag to an error message with the correct links for WebGL.\r\n * @param {Element} canvas. The canvas element to create a\r\n *     context from.\r\n * @param {WebGLContextCreationAttirbutes} opt_attribs Any\r\n *     creation attributes you want to pass in.\r\n * @param {function:(msg)} opt_onError An function to call\r\n *     if there is an error during creation.\r\n * @return {WebGLRenderingContext} The created context.\r\n */\r\nvar setupWebGL = function(canvas, opt_attribs, opt_onError) {\r\n  function handleCreationError(msg) {\r\n      var container = document.getElementsByTagName(\"body\")[0];\r\n    //var container = canvas.parentNode;\r\n    if (container) {\r\n      var str = window.WebGLRenderingContext ?\r\n           OTHER_PROBLEM :\r\n           GET_A_WEBGL_BROWSER;\r\n      if (msg) {\r\n        str += \"<br/><br/>Status: \" + msg;\r\n      }\r\n      container.innerHTML = makeFailHTML(str);\r\n    }\r\n  };\r\n\r\n  opt_onError = opt_onError || handleCreationError;\r\n\r\n  if (canvas.addEventListener) {\r\n    canvas.addEventListener(\"webglcontextcreationerror\", function(event) {\r\n          opt_onError(event.statusMessage);\r\n        }, false);\r\n  }\r\n  var context = create3DContext(canvas, opt_attribs);\r\n  if (!context) {\r\n    if (!window.WebGLRenderingContext) {\r\n      opt_onError(\"\");\r\n    } else {\r\n      opt_onError(\"\");\r\n    }\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\n/**\r\n * Creates a webgl context.\r\n * @param {!Canvas} canvas The canvas tag to get context\r\n *     from. If one is not passed in one will be created.\r\n * @return {!WebGLContext} The created context.\r\n */\r\nvar create3DContext = function(canvas, opt_attribs) {\r\n  var names = [\"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\r\n  var context = null;\r\n  for (var ii = 0; ii < names.length; ++ii) {\r\n    try {\r\n      context = canvas.getContext(names[ii], opt_attribs);\r\n    } catch(e) {}\r\n    if (context) {\r\n      break;\r\n    }\r\n  }\r\n  return context;\r\n}\r\n\r\nreturn {\r\n  create3DContext: create3DContext,\r\n  setupWebGL: setupWebGL\r\n};\r\n}();\r\n\r\n/**\r\n * Provides requestAnimationFrame in a cross browser\r\n * way.\r\n */\r\nif (!window.requestAnimationFrame) {\r\n  window.requestAnimationFrame = (function() {\r\n    return window.requestAnimationFrame ||\r\n           window.webkitRequestAnimationFrame ||\r\n           window.mozRequestAnimationFrame ||\r\n           window.oRequestAnimationFrame ||\r\n           window.msRequestAnimationFrame ||\r\n           function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\r\n             window.setTimeout(callback, 1000/60);\r\n           };\r\n  })();\r\n}\r\n\r\n/** * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec. \r\n * \r\n * Cancels an animation frame request. \r\n * Checks for cross-browser support, falls back to clearTimeout. \r\n * @param {number}  Animation frame request. */\r\nif (!window.cancelAnimationFrame) {\r\n  window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||\r\n                                 window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||\r\n                                 window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||\r\n                                 window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||\r\n                                 window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||\r\n                                 window.clearTimeout);\r\n}\r\n\r\n/* harmony default export */ var webgl_utils = (WebGLUtils);\n// CONCATENATED MODULE: ./src/util/webgl-debug.js\n//Copyright (c) 2009 The Chromium Authors. All rights reserved.\r\n//Use of this source code is governed by a BSD-style license that can be\r\n//found in the LICENSE file.\r\n\r\n// Various functions for helping debug WebGL apps.\r\n\r\nvar WebGLDebugUtils = function() {\r\n\r\n/**\r\n * Wrapped logging function.\r\n * @param {string} msg Message to log.\r\n */\r\nvar log = function(msg) {\r\n  if (window.console && window.console.log) {\r\n    window.console.log(msg);\r\n  }\r\n};\r\n\r\n/**\r\n * Which arguements are enums.\r\n * @type {!Object.<number, string>}\r\n */\r\nvar glValidEnumContexts = {\r\n\r\n  // Generic setters and getters\r\n\r\n  'enable': { 0:true },\r\n  'disable': { 0:true },\r\n  'getParameter': { 0:true },\r\n\r\n  // Rendering\r\n\r\n  'drawArrays': { 0:true },\r\n  'drawElements': { 0:true, 2:true },\r\n\r\n  // Shaders\r\n\r\n  'createShader': { 0:true },\r\n  'getShaderParameter': { 1:true },\r\n  'getProgramParameter': { 1:true },\r\n\r\n  // Vertex attributes\r\n\r\n  'getVertexAttrib': { 1:true },\r\n  'vertexAttribPointer': { 2:true },\r\n\r\n  // Textures\r\n\r\n  'bindTexture': { 0:true },\r\n  'activeTexture': { 0:true },\r\n  'getTexParameter': { 0:true, 1:true },\r\n  'texParameterf': { 0:true, 1:true },\r\n  'texParameteri': { 0:true, 1:true, 2:true },\r\n  'texImage2D': { 0:true, 2:true, 6:true, 7:true },\r\n  'texSubImage2D': { 0:true, 6:true, 7:true },\r\n  'copyTexImage2D': { 0:true, 2:true },\r\n  'copyTexSubImage2D': { 0:true },\r\n  'generateMipmap': { 0:true },\r\n\r\n  // Buffer objects\r\n\r\n  'bindBuffer': { 0:true },\r\n  'bufferData': { 0:true, 2:true },\r\n  'bufferSubData': { 0:true },\r\n  'getBufferParameter': { 0:true, 1:true },\r\n\r\n  // Renderbuffers and framebuffers\r\n\r\n  'pixelStorei': { 0:true, 1:true },\r\n  'readPixels': { 4:true, 5:true },\r\n  'bindRenderbuffer': { 0:true },\r\n  'bindFramebuffer': { 0:true },\r\n  'checkFramebufferStatus': { 0:true },\r\n  'framebufferRenderbuffer': { 0:true, 1:true, 2:true },\r\n  'framebufferTexture2D': { 0:true, 1:true, 2:true },\r\n  'getFramebufferAttachmentParameter': { 0:true, 1:true, 2:true },\r\n  'getRenderbufferParameter': { 0:true, 1:true },\r\n  'renderbufferStorage': { 0:true, 1:true },\r\n\r\n  // Frame buffer operations (clear, blend, depth test, stencil)\r\n\r\n  'clear': { 0:true },\r\n  'depthFunc': { 0:true },\r\n  'blendFunc': { 0:true, 1:true },\r\n  'blendFuncSeparate': { 0:true, 1:true, 2:true, 3:true },\r\n  'blendEquation': { 0:true },\r\n  'blendEquationSeparate': { 0:true, 1:true },\r\n  'stencilFunc': { 0:true },\r\n  'stencilFuncSeparate': { 0:true, 1:true },\r\n  'stencilMaskSeparate': { 0:true },\r\n  'stencilOp': { 0:true, 1:true, 2:true },\r\n  'stencilOpSeparate': { 0:true, 1:true, 2:true, 3:true },\r\n\r\n  // Culling\r\n\r\n  'cullFace': { 0:true },\r\n  'frontFace': { 0:true },\r\n};\r\n\r\n/**\r\n * Map of numbers to names.\r\n * @type {Object}\r\n */\r\nvar glEnums = null;\r\n\r\n/**\r\n * Initializes this module. Safe to call more than once.\r\n * @param {!WebGLRenderingContext} ctx A WebGL context. If\r\n *    you have more than one context it doesn't matter which one\r\n *    you pass in, it is only used to pull out constants.\r\n */\r\nfunction init(ctx) {\r\n  if (glEnums == null) {\r\n    glEnums = { };\r\n    for (var propertyName in ctx) {\r\n      if (typeof ctx[propertyName] == 'number') {\r\n        glEnums[ctx[propertyName]] = propertyName;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Checks the utils have been initialized.\r\n */\r\nfunction checkInit() {\r\n  if (glEnums == null) {\r\n    throw 'WebGLDebugUtils.init(ctx) not called';\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true or false if value matches any WebGL enum\r\n * @param {*} value Value to check if it might be an enum.\r\n * @return {boolean} True if value matches one of the WebGL defined enums\r\n */\r\nfunction mightBeEnum(value) {\r\n  checkInit();\r\n  return (glEnums[value] !== undefined);\r\n}\r\n\r\n/**\r\n * Gets an string version of an WebGL enum.\r\n *\r\n * Example:\r\n *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());\r\n *\r\n * @param {number} value Value to return an enum for\r\n * @return {string} The string version of the enum.\r\n */\r\nfunction glEnumToString(value) {\r\n  checkInit();\r\n  var name = glEnums[value];\r\n  return (name !== undefined) ? name :\r\n      (\"*UNKNOWN WebGL ENUM (0x\" + value.toString(16) + \")\");\r\n}\r\n\r\n/**\r\n * Returns the string version of a WebGL argument.\r\n * Attempts to convert enum arguments to strings.\r\n * @param {string} functionName the name of the WebGL function.\r\n * @param {number} argumentIndx the index of the argument.\r\n * @param {*} value The value of the argument.\r\n * @return {string} The value as a string.\r\n */\r\nfunction glFunctionArgToString(functionName, argumentIndex, value) {\r\n  var funcInfo = glValidEnumContexts[functionName];\r\n  if (funcInfo !== undefined) {\r\n    if (funcInfo[argumentIndex]) {\r\n      return glEnumToString(value);\r\n    }\r\n  }\r\n  return value.toString();\r\n}\r\n\r\n/**\r\n * Given a WebGL context returns a wrapped context that calls\r\n * gl.getError after every command and calls a function if the\r\n * result is not gl.NO_ERROR.\r\n *\r\n * @param {!WebGLRenderingContext} ctx The webgl context to\r\n *        wrap.\r\n * @param {!function(err, funcName, args): void} opt_onErrorFunc\r\n *        The function to call when gl.getError returns an\r\n *        error. If not specified the default function calls\r\n *        console.log with a message.\r\n */\r\nfunction makeDebugContext(ctx, opt_onErrorFunc) {\r\n  init(ctx);\r\n  opt_onErrorFunc = opt_onErrorFunc || function(err, functionName, args) {\r\n        // apparently we can't do args.join(\",\");\r\n        var argStr = \"\";\r\n        for (var ii = 0; ii < args.length; ++ii) {\r\n          argStr += ((ii == 0) ? '' : ', ') +\r\n              glFunctionArgToString(functionName, ii, args[ii]);\r\n        }\r\n        log(\"WebGL error \"+ glEnumToString(err) + \" in \"+ functionName +\r\n            \"(\" + argStr + \")\");\r\n      };\r\n\r\n  // Holds booleans for each GL error so after we get the error ourselves\r\n  // we can still return it to the client app.\r\n  var glErrorShadow = { };\r\n\r\n  // Makes a function that calls a WebGL function and then calls getError.\r\n  function makeErrorWrapper(ctx, functionName) {\r\n    return function() {\r\n      var result = ctx[functionName].apply(ctx, arguments);\r\n      var err = ctx.getError();\r\n      if (err != 0) {\r\n        glErrorShadow[err] = true;\r\n        opt_onErrorFunc(err, functionName, arguments);\r\n      }\r\n      return result;\r\n    };\r\n  }\r\n\r\n  // Make a an object that has a copy of every property of the WebGL context\r\n  // but wraps all functions.\r\n  var wrapper = {};\r\n  for (var propertyName in ctx) {\r\n    if (typeof ctx[propertyName] == 'function') {\r\n       wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);\r\n     } else {\r\n       wrapper[propertyName] = ctx[propertyName];\r\n     }\r\n  }\r\n\r\n  // Override the getError function with one that returns our saved results.\r\n  wrapper.getError = function() {\r\n    for (var err in glErrorShadow) {\r\n      if (glErrorShadow[err]) {\r\n        glErrorShadow[err] = false;\r\n        return err;\r\n      }\r\n    }\r\n    return ctx.NO_ERROR;\r\n  };\r\n\r\n  return wrapper;\r\n}\r\n\r\nfunction resetToInitialState(ctx) {\r\n  var numAttribs = ctx.getParameter(ctx.MAX_VERTEX_ATTRIBS);\r\n  var tmp = ctx.createBuffer();\r\n  ctx.bindBuffer(ctx.ARRAY_BUFFER, tmp);\r\n  for (var ii = 0; ii < numAttribs; ++ii) {\r\n    ctx.disableVertexAttribArray(ii);\r\n    ctx.vertexAttribPointer(ii, 4, ctx.FLOAT, false, 0, 0);\r\n    ctx.vertexAttrib1f(ii, 0);\r\n  }\r\n  ctx.deleteBuffer(tmp);\r\n\r\n  var numTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);\r\n  for (var ii = 0; ii < numTextureUnits; ++ii) {\r\n    ctx.activeTexture(ctx.TEXTURE0 + ii);\r\n    ctx.bindTexture(ctx.TEXTURE_CUBE_MAP, null);\r\n    ctx.bindTexture(ctx.TEXTURE_2D, null);\r\n  }\r\n\r\n  ctx.activeTexture(ctx.TEXTURE0);\r\n  ctx.useProgram(null);\r\n  ctx.bindBuffer(ctx.ARRAY_BUFFER, null);\r\n  ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, null);\r\n  ctx.bindFramebuffer(ctx.FRAMEBUFFER, null);\r\n  ctx.bindRenderbuffer(ctx.RENDERBUFFER, null);\r\n  ctx.disable(ctx.BLEND);\r\n  ctx.disable(ctx.CULL_FACE);\r\n  ctx.disable(ctx.DEPTH_TEST);\r\n  ctx.disable(ctx.DITHER);\r\n  ctx.disable(ctx.SCISSOR_TEST);\r\n  ctx.blendColor(0, 0, 0, 0);\r\n  ctx.blendEquation(ctx.FUNC_ADD);\r\n  ctx.blendFunc(ctx.ONE, ctx.ZERO);\r\n  ctx.clearColor(0, 0, 0, 0);\r\n  ctx.clearDepth(1);\r\n  ctx.clearStencil(-1);\r\n  ctx.colorMask(true, true, true, true);\r\n  ctx.cullFace(ctx.BACK);\r\n  ctx.depthFunc(ctx.LESS);\r\n  ctx.depthMask(true);\r\n  ctx.depthRange(0, 1);\r\n  ctx.frontFace(ctx.CCW);\r\n  ctx.hint(ctx.GENERATE_MIPMAP_HINT, ctx.DONT_CARE);\r\n  ctx.lineWidth(1);\r\n  ctx.pixelStorei(ctx.PACK_ALIGNMENT, 4);\r\n  ctx.pixelStorei(ctx.UNPACK_ALIGNMENT, 4);\r\n  ctx.pixelStorei(ctx.UNPACK_FLIP_Y_WEBGL, false);\r\n  ctx.pixelStorei(ctx.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n  // TODO: Delete this IF.\r\n  if (ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL) {\r\n    ctx.pixelStorei(ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx.BROWSER_DEFAULT_WEBGL);\r\n  }\r\n  ctx.polygonOffset(0, 0);\r\n  ctx.sampleCoverage(1, false);\r\n  ctx.scissor(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  ctx.stencilFunc(ctx.ALWAYS, 0, 0xFFFFFFFF);\r\n  ctx.stencilMask(0xFFFFFFFF);\r\n  ctx.stencilOp(ctx.KEEP, ctx.KEEP, ctx.KEEP);\r\n  ctx.viewport(0, 0, ctx.canvas.clientWidth, ctx.canvas.clientHeight);\r\n  ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT | ctx.STENCIL_BUFFER_BIT);\r\n\r\n  // TODO: This should NOT be needed but Firefox fails with 'hint'\r\n  while(ctx.getError());\r\n}\r\n\r\nfunction makeLostContextSimulatingContext(ctx) {\r\n  var wrapper_ = {};\r\n  var contextId_ = 1;\r\n  var contextLost_ = false;\r\n  var resourceId_ = 0;\r\n  var resourceDb_ = [];\r\n  var onLost_ = undefined;\r\n  var onRestored_ = undefined;\r\n  var nextOnRestored_ = undefined;\r\n\r\n  // Holds booleans for each GL error so can simulate errors.\r\n  var glErrorShadow_ = { };\r\n\r\n  function isWebGLObject(obj) {\r\n    //return false;\r\n    return (obj instanceof WebGLBuffer ||\r\n            obj instanceof WebGLFramebuffer ||\r\n            obj instanceof WebGLProgram ||\r\n            obj instanceof WebGLRenderbuffer ||\r\n            obj instanceof WebGLShader ||\r\n            obj instanceof WebGLTexture);\r\n  }\r\n\r\n  function checkResources(args) {\r\n    for (var ii = 0; ii < args.length; ++ii) {\r\n      var arg = args[ii];\r\n      if (isWebGLObject(arg)) {\r\n        return arg.__webglDebugContextLostId__ == contextId_;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function clearErrors() {\r\n    var k = Object.keys(glErrorShadow_);\r\n    for (var ii = 0; ii < k.length; ++ii) {\r\n      delete glErrorShdow_[k];\r\n    }\r\n  }\r\n\r\n  // Makes a function that simulates WebGL when out of context.\r\n  function makeLostContextWrapper(ctx, functionName) {\r\n    var f = ctx[functionName];\r\n    return function() {\r\n      // Only call the functions if the context is not lost.\r\n      if (!contextLost_) {\r\n        if (!checkResources(arguments)) {\r\n          glErrorShadow_[ctx.INVALID_OPERATION] = true;\r\n          return;\r\n        }\r\n        var result = f.apply(ctx, arguments);\r\n        return result;\r\n      }\r\n    };\r\n  }\r\n\r\n  for (var propertyName in ctx) {\r\n    if (typeof ctx[propertyName] == 'function') {\r\n       wrapper_[propertyName] = makeLostContextWrapper(ctx, propertyName);\r\n     } else {\r\n       wrapper_[propertyName] = ctx[propertyName];\r\n     }\r\n  }\r\n\r\n  function makeWebGLContextEvent(statusMessage) {\r\n    return {statusMessage: statusMessage};\r\n  }\r\n\r\n  function freeResources() {\r\n    for (var ii = 0; ii < resourceDb_.length; ++ii) {\r\n      var resource = resourceDb_[ii];\r\n      if (resource instanceof WebGLBuffer) {\r\n        ctx.deleteBuffer(resource);\r\n      } else if (resource instanceof WebctxFramebuffer) {\r\n        ctx.deleteFramebuffer(resource);\r\n      } else if (resource instanceof WebctxProgram) {\r\n        ctx.deleteProgram(resource);\r\n      } else if (resource instanceof WebctxRenderbuffer) {\r\n        ctx.deleteRenderbuffer(resource);\r\n      } else if (resource instanceof WebctxShader) {\r\n        ctx.deleteShader(resource);\r\n      } else if (resource instanceof WebctxTexture) {\r\n        ctx.deleteTexture(resource);\r\n      }\r\n    }\r\n  }\r\n\r\n  wrapper_.loseContext = function() {\r\n    if (!contextLost_) {\r\n      contextLost_ = true;\r\n      ++contextId_;\r\n      while (ctx.getError());\r\n      clearErrors();\r\n      glErrorShadow_[ctx.CONTEXT_LOST_WEBGL] = true;\r\n      setTimeout(function() {\r\n          if (onLost_) {\r\n            onLost_(makeWebGLContextEvent(\"context lost\"));\r\n          }\r\n        }, 0);\r\n    }\r\n  };\r\n\r\n  wrapper_.restoreContext = function() {\r\n    if (contextLost_) {\r\n      if (onRestored_) {\r\n        setTimeout(function() {\r\n            freeResources();\r\n            resetToInitialState(ctx);\r\n            contextLost_ = false;\r\n            if (onRestored_) {\r\n              var callback = onRestored_;\r\n              onRestored_ = nextOnRestored_;\r\n              nextOnRestored_ = undefined;\r\n              callback(makeWebGLContextEvent(\"context restored\"));\r\n            }\r\n          }, 0);\r\n      } else {\r\n        throw \"You can not restore the context without a listener\"\r\n      }\r\n    }\r\n  };\r\n\r\n  // Wrap a few functions specially.\r\n  wrapper_.getError = function() {\r\n    if (!contextLost_) {\r\n      var err;\r\n      while (err = ctx.getError()) {\r\n        glErrorShadow_[err] = true;\r\n      }\r\n    }\r\n    for (var err in glErrorShadow_) {\r\n      if (glErrorShadow_[err]) {\r\n        delete glErrorShadow_[err];\r\n        return err;\r\n      }\r\n    }\r\n    return ctx.NO_ERROR;\r\n  };\r\n\r\n  var creationFunctions = [\r\n    \"createBuffer\",\r\n    \"createFramebuffer\",\r\n    \"createProgram\",\r\n    \"createRenderbuffer\",\r\n    \"createShader\",\r\n    \"createTexture\"\r\n  ];\r\n  for (var ii = 0; ii < creationFunctions.length; ++ii) {\r\n    var functionName = creationFunctions[ii];\r\n    wrapper_[functionName] = function(f) {\r\n      return function() {\r\n        if (contextLost_) {\r\n          return null;\r\n        }\r\n        var obj = f.apply(ctx, arguments);\r\n        obj.__webglDebugContextLostId__ = contextId_;\r\n        resourceDb_.push(obj);\r\n        return obj;\r\n      };\r\n    }(ctx[functionName]);\r\n  }\r\n\r\n  var functionsThatShouldReturnNull = [\r\n    \"getActiveAttrib\",\r\n    \"getActiveUniform\",\r\n    \"getBufferParameter\",\r\n    \"getContextAttributes\",\r\n    \"getAttachedShaders\",\r\n    \"getFramebufferAttachmentParameter\",\r\n    \"getParameter\",\r\n    \"getProgramParameter\",\r\n    \"getProgramInfoLog\",\r\n    \"getRenderbufferParameter\",\r\n    \"getShaderParameter\",\r\n    \"getShaderInfoLog\",\r\n    \"getShaderSource\",\r\n    \"getTexParameter\",\r\n    \"getUniform\",\r\n    \"getUniformLocation\",\r\n    \"getVertexAttrib\"\r\n  ];\r\n  for (var ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {\r\n    var functionName = functionsThatShouldReturnNull[ii];\r\n    wrapper_[functionName] = function(f) {\r\n      return function() {\r\n        if (contextLost_) {\r\n          return null;\r\n        }\r\n        return f.apply(ctx, arguments);\r\n      }\r\n    }(wrapper_[functionName]);\r\n  }\r\n\r\n  var isFunctions = [\r\n    \"isBuffer\",\r\n    \"isEnabled\",\r\n    \"isFramebuffer\",\r\n    \"isProgram\",\r\n    \"isRenderbuffer\",\r\n    \"isShader\",\r\n    \"isTexture\"\r\n  ];\r\n  for (var ii = 0; ii < isFunctions.length; ++ii) {\r\n    var functionName = isFunctions[ii];\r\n    wrapper_[functionName] = function(f) {\r\n      return function() {\r\n        if (contextLost_) {\r\n          return false;\r\n        }\r\n        return f.apply(ctx, arguments);\r\n      }\r\n    }(wrapper_[functionName]);\r\n  }\r\n\r\n  wrapper_.checkFramebufferStatus = function(f) {\r\n    return function() {\r\n      if (contextLost_) {\r\n        return ctx.FRAMEBUFFER_UNSUPPORTED;\r\n      }\r\n      return f.apply(ctx, arguments);\r\n    };\r\n  }(wrapper_.checkFramebufferStatus);\r\n\r\n  wrapper_.getAttribLocation = function(f) {\r\n    return function() {\r\n      if (contextLost_) {\r\n        return -1;\r\n      }\r\n      return f.apply(ctx, arguments);\r\n    };\r\n  }(wrapper_.getAttribLocation);\r\n\r\n  wrapper_.getVertexAttribOffset = function(f) {\r\n    return function() {\r\n      if (contextLost_) {\r\n        return 0;\r\n      }\r\n      return f.apply(ctx, arguments);\r\n    };\r\n  }(wrapper_.getVertexAttribOffset);\r\n\r\n  wrapper_.isContextLost = function() {\r\n    return contextLost_;\r\n  };\r\n\r\n  function wrapEvent(listener) {\r\n    if (typeof(listener) == \"function\") {\r\n      return listener;\r\n    } else {\r\n      return function(info) {\r\n        listener.handleEvent(info);\r\n      }\r\n    }\r\n  }\r\n\r\n  wrapper_.registerOnContextLostListener = function(listener) {\r\n    onLost_ = wrapEvent(listener);\r\n  };\r\n\r\n  wrapper_.registerOnContextRestoredListener = function(listener) {\r\n    if (contextLost_) {\r\n      nextOnRestored_ = wrapEvent(listener);\r\n    } else {\r\n      onRestored_ = wrapEvent(listener);\r\n    }\r\n  }\r\n\r\n  return wrapper_;\r\n}\r\n\r\nreturn {\r\n  /**\r\n   * Initializes this module. Safe to call more than once.\r\n   * @param {!WebGLRenderingContext} ctx A WebGL context. If\r\n   *    you have more than one context it doesn't matter which one\r\n   *    you pass in, it is only used to pull out constants.\r\n   */\r\n  'init': init,\r\n\r\n  /**\r\n   * Returns true or false if value matches any WebGL enum\r\n   * @param {*} value Value to check if it might be an enum.\r\n   * @return {boolean} True if value matches one of the WebGL defined enums\r\n   */\r\n  'mightBeEnum': mightBeEnum,\r\n\r\n  /**\r\n   * Gets an string version of an WebGL enum.\r\n   *\r\n   * Example:\r\n   *   WebGLDebugUtil.init(ctx);\r\n   *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());\r\n   *\r\n   * @param {number} value Value to return an enum for\r\n   * @return {string} The string version of the enum.\r\n   */\r\n  'glEnumToString': glEnumToString,\r\n\r\n  /**\r\n   * Converts the argument of a WebGL function to a string.\r\n   * Attempts to convert enum arguments to strings.\r\n   *\r\n   * Example:\r\n   *   WebGLDebugUtil.init(ctx);\r\n   *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 0, gl.TEXTURE_2D);\r\n   *\r\n   * would return 'TEXTURE_2D'\r\n   *\r\n   * @param {string} functionName the name of the WebGL function.\r\n   * @param {number} argumentIndx the index of the argument.\r\n   * @param {*} value The value of the argument.\r\n   * @return {string} The value as a string.\r\n   */\r\n  'glFunctionArgToString': glFunctionArgToString,\r\n\r\n  /**\r\n   * Given a WebGL context returns a wrapped context that calls\r\n   * gl.getError after every command and calls a function if the\r\n   * result is not NO_ERROR.\r\n   *\r\n   * You can supply your own function if you want. For example, if you'd like\r\n   * an exception thrown on any GL error you could do this\r\n   *\r\n   *    function throwOnGLError(err, funcName, args) {\r\n   *      throw WebGLDebugUtils.glEnumToString(err) + \" was caused by call to\" +\r\n   *            funcName;\r\n   *    };\r\n   *\r\n   *    ctx = WebGLDebugUtils.makeDebugContext(\r\n   *        canvas.getContext(\"webgl\"), throwOnGLError);\r\n   *\r\n   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.\r\n   * @param {!function(err, funcName, args): void} opt_onErrorFunc The function\r\n   *     to call when gl.getError returns an error. If not specified the default\r\n   *     function calls console.log with a message.\r\n   */\r\n  'makeDebugContext': makeDebugContext,\r\n\r\n  /**\r\n   * Given a WebGL context returns a wrapped context that adds 4\r\n   * functions.\r\n   *\r\n   * ctx.loseContext:\r\n   *   simulates a lost context event.\r\n   *\r\n   * ctx.restoreContext:\r\n   *   simulates the context being restored.\r\n   *\r\n   * ctx.registerOnContextLostListener(listener):\r\n   *   lets you register a listener for context lost. Use instead\r\n   *   of addEventListener('webglcontextlostevent', listener);\r\n   *\r\n   * ctx.registerOnContextRestoredListener(listener):\r\n   *   lets you register a listener for context restored. Use\r\n   *   instead of addEventListener('webglcontextrestored',\r\n   *   listener);\r\n   *\r\n   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.\r\n   */\r\n  'makeLostContextSimulatingContext': makeLostContextSimulatingContext,\r\n\r\n  /**\r\n   * Resets a context to the initial state.\r\n   * @param {!WebGLRenderingContext} ctx The webgl context to\r\n   *     reset.\r\n   */\r\n  'resetToInitialState': resetToInitialState\r\n};\r\n\r\n}();\r\n\r\n/* harmony default export */ var webgl_debug = (WebGLDebugUtils);\n// CONCATENATED MODULE: ./src/util/Util.js\n\r\n\r\n\r\nconst Util = {\r\n    initShaders: function(gl, vshader, fshader) {\r\n        var program = Util.createProgram(gl, vshader, fshader);\r\n        if (!program) {\r\n            console.log('Failed to create program');\r\n            return false;\r\n        }\r\n\r\n        gl.useProgram(program);\r\n        gl.program = program;\r\n\r\n        return true;\r\n    },\r\n\r\n    createProgram: function(gl, vshader, fshader) {\r\n        // Create shader object\r\n        var vertexShader = Util.loadShader(gl, gl.VERTEX_SHADER, vshader);\r\n        var fragmentShader = Util.loadShader(gl, gl.FRAGMENT_SHADER, fshader);\r\n        if (!vertexShader || !fragmentShader) {\r\n            return null;\r\n        }\r\n\r\n        // Create a program object\r\n        var program = gl.createProgram();\r\n        if (!program) {\r\n            return null;\r\n        }\r\n\r\n        // Attach the shader objects\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        // Link the program object\r\n        gl.linkProgram(program);\r\n\r\n        // Check the result of linking\r\n        var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n        if (!linked) {\r\n            var error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        return program;\r\n    },\r\n\r\n    loadShader: function(gl, type, source) {\r\n        // Create shader object\r\n        var shader = gl.createShader(type);\r\n        if (shader == null) {\r\n            console.log('unable to create shader');\r\n            return null;\r\n        }\r\n\r\n        // Set the shader program\r\n        gl.shaderSource(shader, source);\r\n\r\n        // Compile the shader\r\n        gl.compileShader(shader);\r\n\r\n        // Check the result of compilation\r\n        var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (!compiled) {\r\n            var error = gl.getShaderInfoLog(shader);\r\n            console.log('Failed to compile shader: ' + error);\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n\r\n        return shader;\r\n    },\r\n\r\n    getWebGLContext: function(canvas, opt_debug) {\r\n        // Get the rendering context for WebGL\r\n        var gl = webgl_utils.setupWebGL(canvas);\r\n        if (!gl) return null;\r\n\r\n        // if opt_debug is explicitly false, create the context for debugging\r\n        if (arguments.length < 2 || opt_debug) {\r\n            gl = webgl_debug.makeDebugContext(gl);\r\n        }\r\n\r\n        return gl;\r\n    },\r\n\r\n    create3DContext : function(canvas, opt_attribs) {\r\n        var names = [\"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\r\n        var context = null;\r\n        for (var ii = 0; ii < names.length; ++ii) {\r\n            try {\r\n                context = canvas.getContext(names[ii], opt_attribs);\r\n            } catch(e) {}\r\n            if (context) {\r\n                break;\r\n            }\r\n        }\r\n        return context;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var util_Util = (Util);\n// CONCATENATED MODULE: ./src/light/Light.js\n\r\nclass Light {\r\n    constructor(param) {\r\n        this.type = 'Light';\r\n\r\n        param = param || {};\r\n        this.color = param.color || [1,1,1];\r\n        this.intensity = param.intensity !== undefined ? param.intensity : 1;\r\n        this.castShadow = param.castShadow;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var light_Light = (Light);\r\n\n// CONCATENATED MODULE: ./src/light/AmbientLight.js\n\r\n\r\nclass AmbientLight_AmbientLight extends light_Light{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'AmbientLight';\r\n    }\r\n}\r\n\r\n/* harmony default export */ var light_AmbientLight = (AmbientLight_AmbientLight);\r\n\n// CONCATENATED MODULE: ./src/light/DirectionalLight.js\n\r\n\r\n\r\nclass DirectionalLight_DirectionalLight extends light_Light{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'DirectionalLight';\r\n        this.direction = [1,1,1];\r\n        this.setDirection(param.direction || [1,1,1]);\r\n    }\r\n\r\n    setDirection(direction){\r\n        this.direction =  new Vector3().fromArray(direction).normalize().toArray();\r\n    }\r\n}\r\n\r\n/* harmony default export */ var light_DirectionalLight = (DirectionalLight_DirectionalLight);\r\n\n// CONCATENATED MODULE: ./src/math/Vector2.js\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nfunction Vector2( x, y ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\r\n}\r\n\r\nObject.defineProperties( Vector2.prototype, {\r\n\r\n\t\"width\": {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.x;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis.x = value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t\"height\": {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.y;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis.y = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nObject.assign( Vector2.prototype, {\r\n\r\n\tisVector2: true,\r\n\r\n\tset: function ( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min = new Vector2();\r\n\t\tvar max = new Vector2();\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tmin.set( minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t},\r\n\r\n\tcross: function ( v ) {\r\n\r\n\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t},\r\n\r\n\tmanhattanLength: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t},\r\n\r\n\tangle: function () {\r\n\r\n\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\tvar angle = Math.atan2( this.y, this.x );\r\n\r\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\r\n\r\n\t\treturn angle;\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t},\r\n\r\n\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Vector2: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateAround: function ( center, angle ) {\r\n\r\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tvar x = this.x - center.x;\r\n\t\tvar y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/core/Renderer.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Renderer_Renderer {\r\n    constructor(param) {\r\n        var that = this;\r\n        param = param || {};\r\n        this.bufferList = [];\r\n\r\n        this.programList = {};\r\n\r\n        this.curCameraPosition = null;\r\n        this.renderList = {\r\n            opacityList:[],\r\n            transparentList:[]\r\n        };\r\n\r\n        this.camera = null;\r\n\r\n        var canvas = document.getElementById('webgl');\r\n        var gl = this.gl = canvas.getContext('2d');\r\n\r\n    }\r\n\r\n\r\n    render(scene, camera){\r\n        var that = this;\r\n        that.camera = camera;\r\n        that.curCameraPosition = camera.position;\r\n\r\n        var renderList = that.sortRenderList(scene);\r\n\r\n        var gl = that.gl;\r\n\r\n        gl.clearRect(0,0,600,600);\r\n\r\n        var ambientLight = null;\r\n        var directionalLight = null;\r\n\r\n        for(var i in scene.lights){\r\n            if(scene.lights[i].type === 'DirectionalLight'){\r\n                directionalLight = scene.lights[i];\r\n            }else if(scene.lights[i].type === 'AmbientLight'){\r\n                ambientLight = scene.lights[i];\r\n            }\r\n        }\r\n\r\n        ambientLight = ambientLight || new light_AmbientLight({intensity:0});\r\n        directionalLight = directionalLight || new light_DirectionalLight({intensity:0});\r\n\r\n        for(var i in renderList){\r\n            this.renderOneMesh(renderList[i], camera, ambientLight, directionalLight);\r\n        }\r\n\r\n    }\r\n\r\n    renderOneMesh(mesh, camera, ambientLight, directionalLight){\r\n        var that = this;\r\n\r\n        var mesh = mesh || new core_Mesh();\r\n        var geometry = mesh.geometry;\r\n        var indices = geometry.indices;\r\n        var vertices = geometry.vertices;\r\n\r\n\r\n        var material = mesh.material;\r\n        var map = material.map;\r\n        var color = material.color;\r\n\r\n        var ctx = that.gl;\r\n\r\n        for(var i=0; i<indices.length; i+=3){\r\n            var point1x = vertices[indices[i]*3];\r\n            var point1y = vertices[indices[i]*3+1];\r\n            var point1z = vertices[indices[i]*3+2];\r\n\r\n            var point2x = vertices[indices[i+1]*3];\r\n            var point2y = vertices[indices[i+1]*3+1];\r\n            var point2z = vertices[indices[i+1]*3+2];\r\n\r\n            var point3x = vertices[indices[i+2]*3];\r\n            var point3y = vertices[indices[i+2]*3+1];\r\n            var point3z = vertices[indices[i+2]*3+2];\r\n\r\n            that.drawTriangle(\r\n                new Vector3().fromArray([point1x,point1y,point1z]),\r\n                new Vector3().fromArray([point2x,point2y,point2z]),\r\n                new Vector3().fromArray([point3x,point3y,point3z]),\r\n                mesh\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    v3Tov2(v3, mesh){\r\n        var that = this;\r\n\r\n        var vpMatrix = that.camera.VPmatrix.clone();\r\n        var v4 = vpMatrix.concat(mesh.matrixWorld).multiplyVector4(new Vector4(v3.x, v3.y, v3.z, 1));\r\n        var v3GL = new Vector3(v4.x/v4.w, v4.y/v4.w, v4.z/v4.w);\r\n        var v2GL = new Vector2(v3GL.x, v3GL.y);\r\n        var v2 = new Vector2((v2GL.x/2+0.5)*600, (0.5-v2GL.y/2)*600);\r\n\r\n        return v2;\r\n    }\r\n\r\n    drawTriangle(a,b,c, mesh){\r\n        var that = this;\r\n        var ctx = that.gl;\r\n\r\n        var a1 = that.v3Tov2(a, mesh);\r\n        var b1 = that.v3Tov2(b, mesh);\r\n        var c1 = that.v3Tov2(c, mesh);\r\n\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.strokeStyle = '#ff0000';\r\n        // ctx.beginPath();\r\n        // ctx.moveTo(a1.x,a1.y);\r\n        // ctx.lineTo(b1.x,b1.y);\r\n        // ctx.lineTo(c1.x,c1.y);\r\n        // ctx.closePath();\r\n        // ctx.stroke();\r\n\r\n        function sortTByY(a,b) {\r\n            return a.y - b.y;\r\n        }\r\n\r\n        var triangleList = [a1,b1,c1].sort(sortTByY);\r\n        var a2 = triangleList[0];\r\n        var b2 = triangleList[1];\r\n        var c2 = triangleList[2];\r\n        var flatTop,flatBottom;\r\n        if(b2.y === a2.y){\r\n            flatTop = [c2,a2,b2];\r\n        }else if(b2.y === c2.y){\r\n            flatBottom = [a2,b2,c2];\r\n        }else{\r\n            var alpha = (b2.y-a2.y)/(c2.y-a2.y);\r\n            var ac = new Vector2().subVectors(c2,a2);\r\n            var d = a2.clone().addScaledVector(ac, alpha);\r\n\r\n            flatBottom = [a2,b2,d];\r\n            flatTop = [c2,b2,d];\r\n        }\r\n\r\n        if(flatBottom){\r\n            that.drawFlatT(flatBottom,mesh);\r\n        }\r\n        if(flatTop){\r\n            that.drawFlatT(flatTop,mesh);\r\n        }\r\n\r\n    }\r\n\r\n    drawT(t){\r\n        var that = this;\r\n        var ctx = that.gl;\r\n\r\n        var a1 = t[0];\r\n        var b1 = t[1];\r\n        var c1 = t[2];\r\n\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.strokeStyle = '#ff0000';\r\n        ctx.beginPath();\r\n        ctx.moveTo(a1.x,a1.y);\r\n        ctx.lineTo(b1.x,b1.y);\r\n        ctx.lineTo(c1.x,c1.y);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n\r\n    drawFlatT(t, mesh){\r\n        var that = this;\r\n        var ctx = that.gl;\r\n\r\n        var a = t[0];\r\n        var b;\r\n        var c;\r\n\r\n        if(t[1].x<t[2].x){\r\n            b = t[1];\r\n            c = t[2];\r\n        }else{\r\n            c = t[1];\r\n            b = t[2];\r\n        }\r\n\r\n        var startY = Math.round(a.y);\r\n        var endY = Math.round(b.y);\r\n        var height = Math.abs(endY - startY);\r\n\r\n        var ab = new Vector2().subVectors(b,a);\r\n        var ac = new Vector2().subVectors(c,a);\r\n\r\n        let dy = 1;\r\n        if(endY<startY){\r\n            dy = -1;\r\n        }\r\n\r\n        for(var y=startY; (y-startY)*(y-endY)<=0; y+=dy){\r\n            if(y<0||y>600){\r\n                continue;\r\n            }\r\n\r\n            var alpha = Math.abs(y-startY)/height;\r\n            var startV2 = a.clone().addScaledVector(ab,alpha);\r\n            var endV2 = a.clone().addScaledVector(ac,alpha);\r\n            var startX = Math.round(startV2.x);\r\n            var endX = Math.round(endV2.x);\r\n\r\n            for(var x=startX; x<=endX; x++){\r\n                if(x<0||x>600){\r\n                    continue;\r\n                }\r\n                ctx.fillStyle = 'rgb('+x+','+y+',0)';\r\n                ctx.fillRect(x,y,1,1);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getAllObjList(obj, allObjList){\r\n        var that = this;\r\n        for(var i in obj.children){\r\n            if(obj.children[i].geometry){\r\n                allObjList.push(obj.children[i]);\r\n            }\r\n            that.getAllObjList(obj.children[i],allObjList);\r\n        }\r\n        return allObjList;\r\n    }\r\n\r\n    sortRenderList(scene){\r\n        var that = this;\r\n\r\n        var allObjList = that.getAllObjList(scene ,[]);\r\n\r\n        for(var i in allObjList){\r\n            var pa = allObjList[i].getWorldPosition();\r\n            var pc = new Vector3().fromArray(that.curCameraPosition);\r\n            var da = pc.distanceTo(pa);\r\n            allObjList[i].distanceToCamera = da;\r\n        }\r\n        var allObjSortedList = allObjList.sort(that.sortFun);\r\n        return allObjSortedList;\r\n    }\r\n\r\n    sortFun(a, b){\r\n        return b.distanceToCamera - a.distanceToCamera;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var core_Renderer = (Renderer_Renderer);\r\n\n// CONCATENATED MODULE: ./src/camera/Camera.js\n\r\n\r\n\r\n\r\n\r\nclass Camera_Camera {\r\n    constructor(fov, aspect, near, far) {\r\n        this.fov = fov;\r\n        this.aspect = aspect;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.position = [0, 0, 10];\r\n        this.target = [0,0,0];\r\n        this.up = [0,1,0];\r\n\r\n        this.VPmatrix = new Matrix4();\r\n\r\n        this.direction = [0,0,-1];\r\n        this.right = [1,0,0];\r\n\r\n        this.scale = [1,1,1];\r\n        this.quaternion = new Quaternion();\r\n        this.matrix = new Matrix4();\r\n        this.matrixWorld = this.matrix;\r\n        this.projectionMatrix = new Matrix4();\r\n\r\n        this.updateAll();\r\n    }\r\n\r\n    updateAll(){\r\n        this.updateOption();\r\n        this.updateMatrix();\r\n        this.updateVPMatrix();\r\n    }\r\n\r\n    updateMatrix(){\r\n        var quaternionD = new Quaternion().setFromUnitVectors(new Vector3(0,0,-1), new Vector3().fromArray(this.direction));\r\n        var right2 = new Vector3(1,0,0).applyQuaternion(quaternionD);\r\n        var quaternionR = new Quaternion().setFromUnitVectors(right2, new Vector3().fromArray(this.right));\r\n        var quaternion = new Quaternion().multiplyQuaternions(quaternionR, quaternionD);\r\n        this.quaternion = quaternion;\r\n\r\n        this.matrix.compose( new Vector3().fromArray(this.position), this.quaternion, new Vector3().fromArray(this.scale) );\r\n        this.projectionMatrix = new Matrix4().setPerspective(this.fov, this.aspect, this.near, this.far);\r\n        // this.updateMatrixWorld ();\r\n    }\r\n\r\n    updateOption(){\r\n        var targetV3 = new Vector3().fromArray(this.target);\r\n        var positionV3 = new Vector3().fromArray(this.position);\r\n        var upV3 = new Vector3().fromArray(this.up);\r\n\r\n        var directionV3 = new Vector3().subVectors(targetV3, positionV3).normalize();\r\n        this.direction = directionV3.toArray();\r\n\r\n        var rightV3 = new Vector3().crossVectors(directionV3, upV3).normalize();\r\n        this.right = rightV3.toArray();\r\n\r\n        // this.up = new Vector3().crossVectors(rightV3, directionV3).normalize().toArray();\r\n    }\r\n\r\n    setPosition(position){\r\n        this.position = position;\r\n        this.updateAll();\r\n    }\r\n\r\n    setTarget(target){\r\n        this.target = target;\r\n        this.updateAll();\r\n    }\r\n\r\n    setUp(up){\r\n        this.up = new Vector3().fromArray(up).normalize().toArray();\r\n        this.updateAll();\r\n    }\r\n\r\n\r\n\r\n    updateVPMatrix(){\r\n        this.VPmatrix = new Matrix4().setPerspective(this.fov, this.aspect, this.near, this.far);\r\n        var Vmatrix = new Matrix4().getInverse(this.matrix);\r\n        this.VPmatrix.concat(Vmatrix);\r\n        //等价\r\n        // this.VPmatrix.lookAt2(this.position[0],this.position[1],this.position[2], this.target[0],this.target[1],this.target[2], this.up[0],this.up[1],this.up[2]);\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var camera_Camera = (Camera_Camera);\r\n\r\n\n// CONCATENATED MODULE: ./src/camera/CameraController.js\n\r\n\r\n\r\nclass CameraController_CameraController {\r\n    constructor(camera) {\r\n        this.camera = camera;\r\n\r\n        this.mouse0State = 'up';\r\n        this.mouse1State = 'up';\r\n        this.mouse2State = 'up';\r\n\r\n        this.x = -1;\r\n        this.y = -1;\r\n\r\n        this.minTilt = 0.1;\r\n        this.maxTilt = 3.04;\r\n    }\r\n\r\n    update(){\r\n        var that = this;\r\n\r\n        window.addEventListener('mousedown',function (e) {\r\n            // console.log(e.button+' down '+e.clientX+','+e.clientY);\r\n            var dom =  window.document.getElementsByTagName('canvas')[0];\r\n            if(!dom){\r\n                return;\r\n            }\r\n            var rect = dom.getBoundingClientRect();\r\n            if(e.clientX < rect.left || e.clientX > rect.right || e.clientY < rect.top || e.clientY > rect.bottom){\r\n                return;\r\n            }\r\n            if(e.button == 0){\r\n                that.mouse0State = 'down';\r\n            }else if(e.button == 1){\r\n                that.mouse1State = 'down';\r\n            }else if(e.button == 2){\r\n                that.mouse2State = 'down';\r\n            }\r\n        });\r\n\r\n        window.addEventListener('mouseup',function (e) {\r\n            // console.log(e.button+' up '+e.clientX+','+e.clientY);\r\n            if(e.button == 0){\r\n                that.mouse0State = 'up';\r\n            }else if(e.button == 1){\r\n                that.mouse1State = 'up';\r\n            }else if(e.button == 2){\r\n                that.mouse2State = 'up';\r\n            }\r\n        });\r\n\r\n        window.addEventListener('mousemove',function (e) {\r\n            // console.log(e.button+' move '+e.clientX+','+e.clientY);\r\n\r\n            var camera = that.camera;\r\n            if(that.mouse0State == 'down'){\r\n                var deltaX = e.clientX - that.x;\r\n                var deltaY = e.clientY - that.y;\r\n\r\n                // var angle = Math.sqrt(deltaX*deltaX + deltaY*deltaY)/80;\r\n                //\r\n                // var upV3 = new Vector3(camera.up);\r\n                // var rightV3 = new Vector3(camera.right);\r\n                //\r\n                // var axisV3 = new Vector3().addVectors( new Vector3().scaleVectors(upV3,deltaX) , new Vector3().scaleVectors(rightV3,deltaY)).normalize();\r\n                //\r\n                // var oldPositionV3 = new Vector3(camera.position);\r\n                // var newPositionV3 = new Vector3().rotateByVector(oldPositionV3, axisV3, angle);\r\n                // var newPosition = newPositionV3.toArray();\r\n                //\r\n                // camera.setPosition(newPosition);\r\n\r\n                var axisYV3 = new Vector3(0,1,0);\r\n                var angleY = deltaX/200;\r\n                var oldPositionV3 = new Vector3().fromArray(camera.position);\r\n                var newPositionV3 = new Vector3().rotateByVector(oldPositionV3, axisYV3, angleY);\r\n                var newPosition = newPositionV3.toArray();\r\n                camera.setPosition(newPosition);\r\n\r\n\r\n                var angleX = deltaY/200;\r\n                var tilt = that.getTilt();\r\n                var endTilt = tilt - angleX;\r\n\r\n                if(endTilt<that.maxTilt && endTilt>that.minTilt){\r\n\r\n                    var axisXV3 = new Vector3(camera.right[0], camera.right[1], camera.right[2]);\r\n                    oldPositionV3 = new Vector3().fromArray(camera.position);\r\n                    newPositionV3 = new Vector3().rotateByVector(oldPositionV3, axisXV3, angleX);\r\n                    newPosition = newPositionV3.toArray();\r\n                    camera.setPosition(newPosition);\r\n                }\r\n\r\n            }\r\n\r\n            if(that.mouse2State == 'down'){\r\n                var deltaX = e.clientX - that.x;\r\n                var deltaY = e.clientY - that.y;\r\n\r\n                var tempUp = new Vector3().crossVectors(new Vector3().fromArray(camera.right), new Vector3().fromArray(camera.direction));\r\n                var axisYV3 = tempUp;\r\n\r\n                var oldTargetV3 = new Vector3().fromArray(camera.target);\r\n                var newTargetV3 = new Vector3().addVectors(oldTargetV3, new Vector3().scaleVectors(axisYV3, deltaY/30));\r\n                var newTargetV3 = newTargetV3.toArray();\r\n                camera.setTarget(newTargetV3);\r\n\r\n                var oldPositionV3 = new Vector3().fromArray(camera.position);\r\n                var newPositionV3 = new Vector3().addVectors(oldPositionV3, new Vector3().scaleVectors(axisYV3, deltaY/30));\r\n                var newPosition = newPositionV3.toArray();\r\n                camera.setPosition(newPosition);\r\n\r\n                var axisXV3 = new Vector3().fromArray(camera.right);\r\n\r\n                oldTargetV3 = new Vector3().fromArray(camera.target);\r\n                newTargetV3 = new Vector3().addVectors(oldTargetV3, new Vector3().scaleVectors(axisXV3, -deltaX/30));\r\n                newTargetV3 = newTargetV3.toArray();\r\n                camera.setTarget(newTargetV3);\r\n\r\n                oldPositionV3 = new Vector3().fromArray(camera.position);\r\n                var newPositionV3 = new Vector3().addVectors(oldPositionV3, new Vector3().scaleVectors(axisXV3, -deltaX/30));\r\n                newPosition = newPositionV3.toArray();\r\n                camera.setPosition(newPosition);\r\n\r\n            }\r\n\r\n            that.x = e.clientX;\r\n            that.y = e.clientY;\r\n        });\r\n\r\n        window.addEventListener('mousewheel',function (e) {\r\n            // console.log(e.button+' wheel '+e.wheelDelta);\r\n\r\n            var camera = that.camera;\r\n\r\n            var delta = e.wheelDelta;\r\n\r\n            if(delta == 0 || typeof(delta) != 'number'){\r\n                return;\r\n            }\r\n            delta = Math.abs(delta)/delta;\r\n\r\n            var directionV3 = new Vector3().fromArray(camera.direction);\r\n\r\n            var oldPositionV3 = new Vector3().fromArray(camera.position);\r\n            var dis = oldPositionV3.lengthSq();\r\n            dis = Math.sqrt(dis);\r\n            var newPositionV3 = new Vector3().addVectors(oldPositionV3, new Vector3().scaleVectors(directionV3, dis/10*delta));\r\n            var newPosition = newPositionV3.toArray();\r\n\r\n            camera.setPosition(newPosition);\r\n\r\n        });\r\n    }\r\n\r\n    getTilt(){\r\n        var camera = this.camera;\r\n        var dir = camera.direction;\r\n        var axixY = new Vector3(0,-1,0);\r\n        var dirV3 = new Vector3().fromArray(dir);\r\n\r\n        var tilt = axixY.angleTo(dirV3);\r\n        return tilt;\r\n\r\n    }\r\n}\r\n\r\n/* harmony default export */ var camera_CameraController = (CameraController_CameraController);\r\n\n// CONCATENATED MODULE: ./src/core/Scene.js\n\r\n\r\n\r\nclass Scene {\r\n    constructor(param) {\r\n        param = param || {};\r\n        this.children = [];\r\n        this.lights = [];\r\n    }\r\n\r\n    add(obj){\r\n        if(obj.type == 'Mesh'){\r\n            this.children.push(obj);\r\n        }else{\r\n            this.lights.push(obj);\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n/* harmony default export */ var core_Scene = (Scene);\n// CONCATENATED MODULE: ./src/material/Texture.js\n\r\nclass Texture {\r\n    constructor(param) {\r\n        param = param || {};\r\n        this.image = param.image || new Image();\r\n        this.wrapS = param.wrapS || COOL.REPEAT;\r\n        this.wrapT = param.wrapT || COOL.REPEAT;\r\n        this.magFilter = param.magFilter || COOL.NEAREST;\r\n        this.minFilter = param.minFilter || COOL.NEAREST;\r\n    }\r\n\r\n    clone(){\r\n\r\n        var image = new Image();\r\n        image.src = this.image.src;\r\n\r\n        var texture = new Texture({\r\n            image: image,\r\n            wrapS: this.wrapS,\r\n            wrapT: this.wrapT,\r\n            magFilter: this.magFilter,\r\n            minFilter: this.minFilter\r\n        });\r\n\r\n        return texture;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_Texture = (Texture);\r\n\n// CONCATENATED MODULE: ./src/material/MeshBasicMaterial.js\n\r\n\r\nclass MeshBasicMaterial_MeshBasicMaterial extends material_Material{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'MeshBasicMaterial';\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_MeshBasicMaterial = (MeshBasicMaterial_MeshBasicMaterial);\r\n\n// CONCATENATED MODULE: ./src/material/MeshLambertMaterial.js\n\r\n\r\nclass MeshLambertMaterial_MeshLambertMaterial extends material_Material{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'MeshLambertMaterial';\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_MeshLambertMaterial = (MeshLambertMaterial_MeshLambertMaterial);\r\n\n// CONCATENATED MODULE: ./src/material/MeshStandardMaterial.js\n\r\n\r\nclass MeshStandardMaterial_MeshStandardMaterial extends material_Material{\r\n    constructor(param) {\r\n        super(param);\r\n        this.type = 'MeshStandardMaterial';\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_MeshStandardMaterial = (MeshStandardMaterial_MeshStandardMaterial);\r\n\n// CONCATENATED MODULE: ./src/math/Box3.js\n\r\n\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nfunction Box3( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n}\r\n\r\nObject.assign( Box3.prototype, {\r\n\r\n\tisBox3: true,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromArray: function ( array ) {\r\n\r\n\t\tvar minX = + Infinity;\r\n\t\tvar minY = + Infinity;\r\n\t\tvar minZ = + Infinity;\r\n\r\n\t\tvar maxX = - Infinity;\r\n\t\tvar maxY = - Infinity;\r\n\t\tvar maxZ = - Infinity;\r\n\r\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\tvar x = array[ i ];\r\n\t\t\tvar y = array[ i + 1 ];\r\n\t\t\tvar z = array[ i + 2 ];\r\n\r\n\t\t\tif ( x < minX ) minX = x;\r\n\t\t\tif ( y < minY ) minY = y;\r\n\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min.set( minX, minY, minZ );\r\n\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromBufferAttribute: function ( attribute ) {\r\n\r\n\t\tvar minX = + Infinity;\r\n\t\tvar minY = + Infinity;\r\n\t\tvar minZ = + Infinity;\r\n\r\n\t\tvar maxX = - Infinity;\r\n\t\tvar maxY = - Infinity;\r\n\t\tvar maxZ = - Infinity;\r\n\r\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\tvar x = attribute.getX( i );\r\n\t\t\tvar y = attribute.getY( i );\r\n\t\t\tvar z = attribute.getZ( i );\r\n\r\n\t\t\tif ( x < minX ) minX = x;\r\n\t\t\tif ( y < minY ) minY = y;\r\n\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min.set( minX, minY, minZ );\r\n\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function setFromCenterAndSize( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromObject: function ( object ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\treturn this.expandByObject( object );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tisEmpty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t},\r\n\r\n\tgetCenter: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Box3: .getCenter() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tgetSize: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Box3: .getSize() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByObject: function () {\r\n\r\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\tvar scope, i, l;\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\tfunction traverse( node ) {\r\n\r\n\t\t\tvar geometry = node.geometry;\r\n\r\n\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\tif ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tv1.copy( vertices[ i ] );\r\n\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\tvar attribute = geometry.attributes.position;\r\n\r\n\t\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn function expandByObject( object ) {\r\n\r\n\t\t\tscope = this;\r\n\r\n\t\t\tobject.updateMatrixWorld( true );\r\n\r\n\t\t\tobject.traverse( traverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\r\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, target ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Box3: .getParameter() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn target.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\r\n\r\n\t},\r\n\r\n\tintersectsSphere: ( function () {\r\n\r\n\t\tvar closestPoint = new Vector3();\r\n\r\n\t\treturn function intersectsSphere( sphere ) {\r\n\r\n\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\r\n\r\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\tvar min, max;\r\n\r\n\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\r\n\r\n\t},\r\n\r\n\tintersectsTriangle: ( function () {\r\n\r\n\t\t// triangle centered vertices\r\n\t\tvar v0 = new Vector3();\r\n\t\tvar v1 = new Vector3();\r\n\t\tvar v2 = new Vector3();\r\n\r\n\t\t// triangle edge vectors\r\n\t\tvar f0 = new Vector3();\r\n\t\tvar f1 = new Vector3();\r\n\t\tvar f2 = new Vector3();\r\n\r\n\t\tvar testAxis = new Vector3();\r\n\r\n\t\tvar center = new Vector3();\r\n\t\tvar extents = new Vector3();\r\n\r\n\t\tvar triangleNormal = new Vector3();\r\n\r\n\t\tfunction satForAxes( axes ) {\r\n\r\n\t\t\tvar i, j;\r\n\r\n\t\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t\t\ttestAxis.fromArray( axes, i );\r\n\t\t\t\t// project the aabb onto the seperating axis\r\n\t\t\t\tvar r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );\r\n\t\t\t\t// project all 3 vertices of the triangle onto the seperating axis\r\n\t\t\t\tvar p0 = v0.dot( testAxis );\r\n\t\t\t\tvar p1 = v1.dot( testAxis );\r\n\t\t\t\tvar p2 = v2.dot( testAxis );\r\n\t\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t\t\t// the axis is seperating and we can exit\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn function intersectsTriangle( triangle ) {\r\n\r\n\t\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// compute box center and extents\r\n\t\t\tthis.getCenter( center );\r\n\t\t\textents.subVectors( this.max, center );\r\n\r\n\t\t\t// translate triangle to aabb origin\r\n\t\t\tv0.subVectors( triangle.a, center );\r\n\t\t\tv1.subVectors( triangle.b, center );\r\n\t\t\tv2.subVectors( triangle.c, center );\r\n\r\n\t\t\t// compute edge vectors for triangle\r\n\t\t\tf0.subVectors( v1, v0 );\r\n\t\t\tf1.subVectors( v2, v1 );\r\n\t\t\tf2.subVectors( v0, v2 );\r\n\r\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\t\tvar axes = [\r\n\t\t\t\t0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,\r\n\t\t\t\tf0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,\r\n\t\t\t\t- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0\r\n\t\t\t];\r\n\t\t\tif ( ! satForAxes( axes ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// test 3 face normals from the aabb\r\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\t\tif ( ! satForAxes( axes ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// finally testing the face normal of the triangle\r\n\t\t\t// use already existing triangle edge vectors here\r\n\t\t\ttriangleNormal.crossVectors( f0, f1 );\r\n\t\t\taxes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];\r\n\t\t\treturn satForAxes( axes );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tclampPoint: function ( point, target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Box3: .clampPoint() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function distanceToPoint( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetBoundingSphere: function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\r\n\t\treturn function getBoundingSphere( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'COOL.Box3: .getBoundingSphere() target is now required' );\r\n\t\t\t\ttarget = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.getCenter( target.center );\r\n\r\n\t\t\ttarget.radius = this.getSize( v1 ).length() * 0.5;\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\tif ( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar points = [\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3(),\r\n\t\t\tnew Vector3()\r\n\t\t];\r\n\r\n\t\treturn function applyMatrix4( matrix ) {\r\n\r\n\t\t\t// transform of empty box is an empty box.\r\n\t\t\tif ( this.isEmpty() ) return this;\r\n\r\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/math/Sphere.js\n\r\n\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nfunction Sphere( center, radius ) {\r\n\r\n\tthis.center = ( center !== undefined ) ? center : new Vector3();\r\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n}\r\n\r\nObject.assign( Sphere.prototype, {\r\n\r\n\tset: function ( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function () {\r\n\r\n\t\tvar box = new Box3();\r\n\r\n\t\treturn function setFromPoints( points, optionalCenter ) {\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbox.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\treturn ( this.radius <= 0 );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\treturn box.intersectsSphere( this );\r\n\r\n\t},\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, target ) {\r\n\r\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Sphere: .clampPoint() target is now required' );\r\n\t\t\ttarget = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\ttarget.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t},\r\n\r\n\tgetBoundingBox: function ( target ) {\r\n\r\n\t\tif ( target === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'COOL.Sphere: .getBoundingBox() target is now required' );\r\n\t\t\ttarget = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\ttarget.set( this.center, this.center );\r\n\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\treturn target;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/core/Geometry.js\n\r\n\r\n\r\n\r\nclass Geometry_Geometry {\r\n    constructor(param) {\r\n        param = param || {};\r\n\r\n        // Create a cube\r\n        //    v6----- v5\r\n        //   /|      /|\r\n        //  v1------v0|\r\n        //  | |     | |\r\n        //  | |v7---|-|v4\r\n        //  |/      |/\r\n        //  v2------v3\r\n\r\n        this.uv = param.uv || new Float32Array([   // Vertex coordinates\r\n\r\n            1,1, 0,1, 0,0, 1,0,  // v0-v1-v2-v3 front\r\n            0,1, 0,0, 1,0, 1,1,  // v0-v3-v4-v5 right\r\n            1,0, 1,1, 0,1, 0,0,  // v0-v5-v6-v1 up\r\n            1,1, 0,1, 0,0, 1,0,  // v1-v6-v7-v2 left\r\n            0,1, 1,1, 1,0, 0,0,  // v7-v4-v3-v2 down\r\n            1,0, 0,0, 0,1, 1,1   // v4-v7-v6-v5 back\r\n\r\n        ]);\r\n\r\n        this.vertices = param.vertices || new Float32Array([   // Vertex coordinates\r\n            0.5, 0.5, 0.5,  -0.5, 0.5, 0.5,  -0.5,-0.5, 0.5,   0.5,-0.5, 0.5,  // v0-v1-v2-v3 front\r\n            0.5, 0.5, 0.5,   0.5,-0.5, 0.5,   0.5,-0.5,-0.5,   0.5, 0.5,-0.5,  // v0-v3-v4-v5 right\r\n            0.5, 0.5, 0.5,   0.5, 0.5,-0.5,  -0.5, 0.5,-0.5,  -0.5, 0.5, 0.5,  // v0-v5-v6-v1 up\r\n            -0.5, 0.5, 0.5,  -0.5, 0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5,-0.5, 0.5,  // v1-v6-v7-v2 left\r\n            -0.5,-0.5,-0.5,   0.5,-0.5,-0.5,   0.5,-0.5, 0.5,  -0.5,-0.5, 0.5,  // v7-v4-v3-v2 down\r\n            0.5,-0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5, 0.5,-0.5,   0.5, 0.5,-0.5   // v4-v7-v6-v5 back\r\n        ]);\r\n\r\n        this.normal = param.normal || this.vertices;\r\n\r\n        if(param.indices){\r\n            this.indices = new Uint16Array(param.indices);\r\n        }else{\r\n            var indicesArray = [];\r\n            for(var i=0; i<param.vertices.length/3; i++){\r\n                indicesArray.push(i);\r\n            }\r\n            this.indices = new Uint16Array(indicesArray);\r\n        }\r\n\r\n\r\n        this.morphAttributes = param.morphAttributes;\r\n\r\n        this.boundingSphere = new Sphere();\r\n        this.boundingBox = new Box3();\r\n        this.computeBoundingBox();\r\n\r\n        // this.updateNormal();\r\n\r\n        this.updataBuffer();\r\n\r\n    }\r\n\r\n    updataBuffer(){\r\n        var buffer = [];\r\n        var uv = this.uv;\r\n        var vertices = this.vertices;\r\n        var normal = this.normal;\r\n        for(var i=0; i<vertices.length; i+=3){\r\n            buffer.push(vertices[i+0]);\r\n            buffer.push(vertices[i+1]);\r\n            buffer.push(vertices[i+2]);\r\n\r\n            buffer.push(normal[i+0]);\r\n            buffer.push(normal[i+1]);\r\n            buffer.push(normal[i+2]);\r\n\r\n            buffer.push(uv[i/3*2+0]);\r\n            buffer.push(uv[i/3*2+1]);\r\n        }\r\n\r\n        this.buffer = new Float32Array(buffer);\r\n    }\r\n\r\n    updateNormal(){\r\n        var normal = [];\r\n        var vertices = this.vertices;\r\n        for(var i=0; i<vertices.length; i+=3*4){\r\n            var line1 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+0], vertices[i+1], vertices[i+2]),\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5])\r\n            );\r\n            var line2 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5]),\r\n                new Vector3(vertices[i+6], vertices[i+7], vertices[i+8]),\r\n            );\r\n            var cur_normal = new Vector3().crossVectors(\r\n                line1,\r\n                line2\r\n            ).toArray();\r\n            for(var j=0 ;j<4; j++){\r\n                normal.push(cur_normal[0], cur_normal[1], cur_normal[2]);\r\n            }\r\n        }\r\n        this.normal = new Float32Array(normal);\r\n\r\n    }\r\n\r\n    computeBoundingBox () {\r\n        var verticesV3 = [];\r\n        for(var i=0; i<this.vertices.length; i+=3){\r\n            verticesV3.push(new Vector3(this.vertices[i], this.vertices[i+1], this.vertices[i+2]))\r\n        }\r\n        this.boundingBox.setFromPoints(verticesV3);\r\n    }\r\n\r\n    clone(){\r\n        var geometry = new Geometry_Geometry({\r\n            vertices: this.vertices.slice(0),\r\n            indices: this.indices.slice(0)\r\n        });\r\n\r\n        return geometry;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var core_Geometry = (Geometry_Geometry);\r\n\n// CONCATENATED MODULE: ./src/core/BoxGeometry.js\n\r\n\r\n\r\n\r\nclass BoxGeometry_BoxGeometry {\r\n    constructor(param) {\r\n        param = param || {};\r\n\r\n        this.uv = param.uv || new Float32Array([   // Vertex coordinates\r\n\r\n            1,1, 0,1, 0,0, 1,0,  // v0-v1-v2-v3 front\r\n            0,1, 0,0, 1,0, 1,1,  // v0-v3-v4-v5 right\r\n            1,0, 1,1, 0,1, 0,0,  // v0-v5-v6-v1 up\r\n            1,1, 0,1, 0,0, 1,0,  // v1-v6-v7-v2 left\r\n            0,1, 1,1, 1,0, 0,0,  // v7-v4-v3-v2 down\r\n            1,0, 0,0, 0,1, 1,1   // v4-v7-v6-v5 back\r\n\r\n        ]);\r\n\r\n        this.vertices = param.indices || new Float32Array([   // Vertex coordinates\r\n            0.5, 0.5, 0.5,  -0.5, 0.5, 0.5,  -0.5,-0.5, 0.5,   0.5,-0.5, 0.5,  // v0-v1-v2-v3 front\r\n            0.5, 0.5, 0.5,   0.5,-0.5, 0.5,   0.5,-0.5,-0.5,   0.5, 0.5,-0.5,  // v0-v3-v4-v5 right\r\n            0.5, 0.5, 0.5,   0.5, 0.5,-0.5,  -0.5, 0.5,-0.5,  -0.5, 0.5, 0.5,  // v0-v5-v6-v1 up\r\n            -0.5, 0.5, 0.5,  -0.5, 0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5,-0.5, 0.5,  // v1-v6-v7-v2 left\r\n            -0.5,-0.5,-0.5,   0.5,-0.5,-0.5,   0.5,-0.5, 0.5,  -0.5,-0.5, 0.5,  // v7-v4-v3-v2 down\r\n            0.5,-0.5,-0.5,  -0.5,-0.5,-0.5,  -0.5, 0.5,-0.5,   0.5, 0.5,-0.5   // v4-v7-v6-v5 back\r\n        ]);\r\n\r\n        this.normal = param.normal || this.vertices;\r\n\r\n        this.indices = param.indices || new Uint16Array([       // Indices of the vertices\r\n            0, 1, 2,   0, 2, 3,    // front\r\n            4, 5, 6,   4, 6, 7,    // right\r\n            8, 9,10,   8,10,11,    // up\r\n            12,13,14,  12,14,15,    // left\r\n            16,17,18,  16,18,19,    // down\r\n            20,21,22,  20,22,23     // back\r\n        ]);\r\n\r\n        this.boundingSphere = new Sphere();\r\n        this.boundingBox = new Box3();\r\n        this.computeBoundingBox();\r\n        // this.computeBoundingSphere();\r\n\r\n        this.updateNormal();\r\n\r\n        this.updataBuffer();\r\n\r\n    }\r\n\r\n    updataBuffer(){\r\n        var buffer = [];\r\n        var uv = this.uv;\r\n        var vertices = this.vertices;\r\n        var normal = this.normal;\r\n        for(var i=0; i<vertices.length; i+=3){\r\n            buffer.push(vertices[i+0]);\r\n            buffer.push(vertices[i+1]);\r\n            buffer.push(vertices[i+2]);\r\n\r\n            buffer.push(normal[i+0]);\r\n            buffer.push(normal[i+1]);\r\n            buffer.push(normal[i+2]);\r\n\r\n            buffer.push(uv[i/3*2+0]);\r\n            buffer.push(uv[i/3*2+1]);\r\n        }\r\n\r\n        this.buffer = new Float32Array(buffer);\r\n    }\r\n\r\n    updateNormal(){\r\n        var normal = [];\r\n        var vertices = this.vertices;\r\n        for(var i=0; i<vertices.length; i+=3*4){\r\n            var line1 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+0], vertices[i+1], vertices[i+2]),\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5])\r\n            );\r\n            var line2 = new Vector3().subVectors(\r\n                new Vector3(vertices[i+3], vertices[i+4], vertices[i+5]),\r\n                new Vector3(vertices[i+6], vertices[i+7], vertices[i+8]),\r\n            );\r\n            var cur_normal = new Vector3().crossVectors(\r\n                line1,\r\n                line2\r\n            ).toArray();\r\n            for(var j=0 ;j<4; j++){\r\n                normal.push(cur_normal[0], cur_normal[1], cur_normal[2]);\r\n            }\r\n        }\r\n        this.normal = new Float32Array(normal);\r\n\r\n    }\r\n\r\n    computeBoundingSphere(){\r\n\r\n        // if ( this.boundingSphere === null ) {\r\n        //     this.boundingSphere = new Sphere();\r\n        // }\r\n        // this.boundingSphere.setFromPoints( this.vertices );\r\n    }\r\n\r\n    computeBoundingBox () {\r\n        var verticesV3 = [];\r\n        for(var i=0; i<this.vertices.length; i+=3){\r\n            verticesV3.push(new Vector3(this.vertices[i], this.vertices[i+1], this.vertices[i+2]))\r\n        }\r\n        this.boundingBox.setFromPoints(verticesV3);\r\n    }\r\n\r\n    clone(){\r\n        var geometry = new BoxGeometry_BoxGeometry({\r\n            vertices: this.vertices.slice(0),\r\n            indices: this.indices.slice(0)\r\n        });\r\n\r\n        return geometry;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var core_BoxGeometry = (BoxGeometry_BoxGeometry);\r\n\n// CONCATENATED MODULE: ./src/core/SphereGeometry.js\n\r\n\r\n\r\n\r\nclass SphereGeometry_SphereGeometry {\r\n    constructor( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n        radius = radius || 1;\r\n\r\n        widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n        heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n        phiStart = phiStart !== undefined ? phiStart : 0;\r\n        phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n        thetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n        thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n        var thetaEnd = thetaStart + thetaLength;\r\n\r\n        var ix, iy;\r\n\r\n        var index = 0;\r\n        var grid = [];\r\n\r\n        var vertex = new Vector3();\r\n        var normal = new Vector3();\r\n\r\n        // buffers\r\n\r\n        var indices = [];\r\n        var vertices = [];\r\n        var normals = [];\r\n        var uvs = [];\r\n\r\n        // generate vertices, normals and uvs\r\n\r\n        for ( iy = 0; iy <= heightSegments; iy ++ ) {\r\n\r\n            var verticesRow = [];\r\n\r\n            var v = iy / heightSegments;\r\n\r\n            for ( ix = 0; ix <= widthSegments; ix ++ ) {\r\n\r\n                var u = ix / widthSegments;\r\n\r\n                // vertex\r\n\r\n                vertex = new Vector3(\r\n                    - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength ),\r\n                    radius * Math.cos( thetaStart + v * thetaLength ),\r\n                    radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength )\r\n                );\r\n\r\n                vertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n                // normal\r\n\r\n                normal = vertex.clone().normalize();\r\n                normals.push( normal.x, normal.y, normal.z );\r\n\r\n                // uv\r\n\r\n                uvs.push( u, 1 - v );\r\n\r\n                verticesRow.push( index ++ );\r\n\r\n            }\r\n\r\n            grid.push( verticesRow );\r\n\r\n        }\r\n\r\n        // indices\r\n\r\n        for ( iy = 0; iy < heightSegments; iy ++ ) {\r\n\r\n            for ( ix = 0; ix < widthSegments; ix ++ ) {\r\n\r\n                var a = grid[ iy ][ ix + 1 ];\r\n                var b = grid[ iy ][ ix ];\r\n                var c = grid[ iy + 1 ][ ix ];\r\n                var d = grid[ iy + 1 ][ ix + 1 ];\r\n\r\n                if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\r\n                if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.vertices = new Float32Array(vertices);\r\n        this.normal = new Float32Array(normals);\r\n        this.uv = new Float32Array(uvs);\r\n\r\n        this.indices = new Uint16Array(indices);\r\n\r\n        var buffer = [];\r\n        var vertices = this.vertices;\r\n        var normal = this.normal;\r\n        var uv = this.uv;\r\n        for(var i=0; i<vertices.length; i+=3){\r\n            buffer.push(vertices[i+0]);\r\n            buffer.push(vertices[i+1]);\r\n            buffer.push(vertices[i+2]);\r\n\r\n            buffer.push(normal[i+0]);\r\n            buffer.push(normal[i+1]);\r\n            buffer.push(normal[i+2]);\r\n\r\n            buffer.push(uv[i/3*2+0]);\r\n            buffer.push(uv[i/3*2+1]);\r\n        }\r\n\r\n        this.buffer = new Float32Array(buffer);\r\n\r\n        this.boundingSphere = new Sphere();\r\n        this.boundingBox = new Box3();\r\n        this.computeBoundingBox();\r\n\r\n    }\r\n\r\n    computeBoundingBox () {\r\n        var verticesV3 = [];\r\n        for(var i=0; i<this.vertices.length; i+=3){\r\n            verticesV3.push(new Vector3(this.vertices[i], this.vertices[i+1], this.vertices[i+2]))\r\n        }\r\n        this.boundingBox.setFromPoints(verticesV3);\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var core_SphereGeometry = (SphereGeometry_SphereGeometry);\r\n\n// CONCATENATED MODULE: ./src/core/GLTFLoader2.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass GLTFLoader2_GLTFLoader{\r\n    constructor(){\r\n        this.gltfObj = null;\r\n        this.urlBase = null;\r\n\r\n        this.arrayBuffers = [];\r\n        this.arrayBufferCount = 0;\r\n        this.dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n    }\r\n\r\n    load(url, onLoadSuccess){\r\n        this.gltfObj = null;\r\n        this.urlBase = null;\r\n\r\n        this.arrayBuffers = [];\r\n        this.arrayBufferCount = 0;\r\n\r\n        var that = this;\r\n        var urlArray = url.split('/');\r\n        var jsonName = urlArray[urlArray.length-1];\r\n        that.urlBase = url.split(jsonName)[0];\r\n\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"get\", url);\r\n        request.onload = function () {\r\n            if (request.status == 200) {\r\n                var gltfObj = JSON.parse(request.responseText);\r\n                that.gltfObj = gltfObj;\r\n                console.log(gltfObj);\r\n\r\n                that.arrayBufferCount = gltfObj.buffers.length;\r\n                var loadBufferCount = 0;\r\n\r\n                for(var i in gltfObj.buffers){\r\n\r\n                    var buffer = gltfObj.buffers[i];\r\n\r\n                    var dataUriRegexResult = buffer.uri.match( that.dataUriRegex );\r\n                    if(dataUriRegexResult){\r\n\r\n                        var buffer = that.base64ToArrayBuffer(dataUriRegexResult);\r\n                        if(buffer){\r\n                            that.arrayBuffers[i] = buffer;\r\n                            loadBufferCount ++;\r\n\r\n                            if(loadBufferCount = that.arrayBufferCount){\r\n\r\n                                var sceneObj = gltfObj.scenes[0];\r\n                                var scene = new core_Scene();\r\n                                for(var nodeindex in sceneObj.nodes){\r\n                                    var nodesIndex = sceneObj.nodes[nodeindex];\r\n                                    var nodesObj = gltfObj.nodes[nodesIndex];\r\n                                    var cur_mesh = that.nodeToMesh(nodesObj);\r\n                                    scene.add(cur_mesh);\r\n                                }\r\n                                onLoadSuccess(scene);\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }else{\r\n\r\n                        var bufferDataUri = that.urlBase + buffer.uri;\r\n\r\n                        var xhr = new XMLHttpRequest();\r\n                        xhr.open( 'GET', bufferDataUri, true );\r\n                        xhr.addEventListener( 'load', function ( event ) {\r\n\r\n                            var buffer = this.response;\r\n                            that.arrayBuffers[i] = buffer;\r\n                            loadBufferCount ++;\r\n\r\n                            if(loadBufferCount = that.arrayBufferCount){\r\n\r\n                                var sceneObj = gltfObj.scenes[0];\r\n                                var scene = new core_Scene();\r\n                                for(var nodeindex in sceneObj.nodes){\r\n                                    var nodesIndex = sceneObj.nodes[nodeindex];\r\n                                    var nodesObj = gltfObj.nodes[nodesIndex];\r\n                                    var cur_mesh = that.nodeToMesh(nodesObj);\r\n                                    scene.add(cur_mesh);\r\n                                }\r\n                                onLoadSuccess(scene);\r\n\r\n                            }\r\n\r\n\r\n                        }, false );\r\n                        xhr.responseType = 'arraybuffer';\r\n                        xhr.send( null );\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n            }\r\n        };\r\n        request.send(null);\r\n\r\n    }\r\n\r\n    nodeToMesh(node){\r\n        var that = this;\r\n\r\n        var meshIndex = node.mesh;\r\n        var mesh = null;\r\n\r\n        if(meshIndex != undefined){\r\n            var meshObj = that.gltfObj.meshes[meshIndex];\r\n            var geometryAndMaterial = that.meshToGeometry(meshObj);\r\n            mesh = new core_Mesh({\r\n                geometry:geometryAndMaterial[0],\r\n                material:geometryAndMaterial[1]\r\n            });\r\n        }else{\r\n            mesh = new core_Mesh();\r\n        }\r\n\r\n        var scale = node.scale;\r\n        if(scale){\r\n            mesh.setScale(scale);\r\n        }\r\n\r\n        var rotation = node.rotation;\r\n        if(rotation){\r\n            var quaternion = new Quaternion().fromArray(rotation);\r\n            mesh.setQuaternion(quaternion);\r\n        }\r\n\r\n        var translation = node.translation;\r\n        if(translation){\r\n            mesh.setPosition(translation);\r\n        }\r\n\r\n        var matrix = node.matrix;\r\n        if(matrix){\r\n            mesh.setMatrix(new Matrix4().fromArray(matrix));\r\n        }\r\n\r\n        for(var i in node.children){\r\n            var nodeChild = that.gltfObj.nodes[node.children[i]];\r\n            var meshChild = that.nodeToMesh(nodeChild);\r\n            mesh.add(meshChild);\r\n        }\r\n\r\n        return mesh;\r\n    }\r\n\r\n    meshToGeometry(mesh){\r\n        var that = this;\r\n\r\n        var primitive0 = mesh.primitives[0];\r\n        var attributes = primitive0.attributes;\r\n\r\n        var positionAccessorIndex = attributes.POSITION;\r\n        var positionAccessor = that.gltfObj.accessors[positionAccessorIndex];\r\n        var positionBufferViewIndex = positionAccessor.bufferView;\r\n        var positionBufferView = that.gltfObj.bufferViews[positionBufferViewIndex];\r\n        var positionData = that.getDataByBufferView(positionBufferView,positionAccessor);\r\n\r\n        var normalAccessorIndex = attributes.NORMAL;\r\n        var normalAccessor = that.gltfObj.accessors[normalAccessorIndex];\r\n        var normalBufferViewIndex = normalAccessor.bufferView;\r\n        var normalBufferView = that.gltfObj.bufferViews[normalBufferViewIndex];\r\n        var normalData = that.getDataByBufferView(normalBufferView,normalAccessor);\r\n\r\n        //TEXCOORD_0\r\n        var uv0AccessorIndex = attributes.TEXCOORD_0;\r\n        var uv0Accessor = that.gltfObj.accessors[uv0AccessorIndex];\r\n        var uv0BufferViewIndex = uv0Accessor.bufferView;\r\n        var uv0BufferView = that.gltfObj.bufferViews[uv0BufferViewIndex];\r\n        var uv0Data = that.getDataByBufferView(uv0BufferView,uv0Accessor);\r\n\r\n        var indicesData = null;\r\n        var indicesAccessorIndex = primitive0.indices;\r\n\r\n        if(indicesAccessorIndex != undefined){\r\n            var indicesAccessor = that.gltfObj.accessors[indicesAccessorIndex];\r\n            var indicesBufferViewIndex = indicesAccessor.bufferView;\r\n            var indicesBufferView = that.gltfObj.bufferViews[indicesBufferViewIndex];\r\n            indicesData = that.getDataByBufferView(indicesBufferView,indicesAccessor);\r\n        }\r\n\r\n        var materialIndex = primitive0.material;\r\n        var materialObj = that.gltfObj.materials[materialIndex];\r\n\r\n        if(materialObj.pbrMetallicRoughness.baseColorTexture){\r\n            var baseColorTextureIndex = materialObj.pbrMetallicRoughness.baseColorTexture.index;\r\n            var textureObj = that.gltfObj.textures[baseColorTextureIndex];\r\n            var imageIndex = textureObj.source;\r\n            var imageObj = that.gltfObj.images[imageIndex];\r\n            var imageUri = imageObj.uri;\r\n\r\n            var dataUriRegexResult = imageObj.uri.match( that.dataUriRegex );\r\n            if(!dataUriRegexResult){\r\n                imageUri = that.urlBase + imageObj.uri;\r\n            }\r\n\r\n            var samplerIndex = textureObj.sampler;\r\n            var sampler = that.gltfObj.samplers[samplerIndex];\r\n\r\n            var image = new Image();\r\n            image.crossOrigin = \"anonymous\";\r\n            image.src= imageUri;\r\n\r\n            var texture = new COOL.Texture({\r\n                image:image,\r\n                //这两个参数有问题，有的9729 9986是什么东西\r\n                // magFilter: sampler.magFilter,\r\n                // minFilter: sampler.minFilter,\r\n                wrapS: sampler.wrapS,\r\n                wrapT: sampler.wrapT,\r\n            });\r\n        }\r\n\r\n\r\n        var material = new COOL.MeshLambertMaterial({map:texture});\r\n\r\n        return [\r\n            new core_Geometry({\r\n                vertices: positionData,\r\n                indices: indicesData,\r\n                normal:normalData,\r\n                uv:uv0Data\r\n            }),\r\n            material\r\n        ];\r\n    }\r\n\r\n    getDataByBufferView(bufferView, accessor){\r\n        var that = this;\r\n        var bufferIndex = bufferView.buffer;\r\n\r\n        var byteLength = bufferView.byteLength || 0;\r\n        var byteOffset = bufferView.byteOffset || 0;\r\n\r\n        var buffer = that.gltfObj.buffers[bufferIndex];\r\n        var bufferDataUri = that.urlBase + buffer.uri;\r\n\r\n        var arrayBuffer = that.arrayBuffers[bufferIndex];\r\n\r\n        var cur_buffer = arrayBuffer.slice( byteOffset, byteOffset + byteLength );\r\n\r\n        var array = null;\r\n        var itemSize = null;\r\n\r\n        var accessorByteOffset = accessor.byteOffset || 0;\r\n\r\n        if(accessor.type == 'SCALAR'){\r\n            itemSize = 1;\r\n        }else if(accessor.type == 'VEC2'){\r\n            itemSize = 2;\r\n        }else if(accessor.type == 'VEC3'){\r\n            itemSize = 3;\r\n        }else if(accessor.type == 'VEC4'){\r\n            itemSize = 4;\r\n        }else{\r\n            console.warn('accessor.type undefined');\r\n        }\r\n\r\n        if(accessor.componentType == 5126){\r\n            array = new Float32Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5123){\r\n            array = new Uint16Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5120){\r\n            array = new Int8Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5121){\r\n            array = new Uint8Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5122){\r\n            array = new Int16Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else if(accessor.componentType == 5125){\r\n            array = new Uint32Array( cur_buffer, accessorByteOffset, accessor.count * itemSize );\r\n        }else{\r\n            console.warn('accessor.componentType undefined');\r\n        }\r\n\r\n        return array;\r\n\r\n\r\n    }\r\n\r\n    base64ToArrayBuffer(dataUriRegexResult){\r\n\r\n        var data = dataUriRegexResult[ 3 ];\r\n        data = decodeURIComponent( data );\r\n        data = atob( data );\r\n\r\n        try {\r\n\r\n            var view = new Uint8Array( data.length );\r\n            for ( var i = 0; i < data.length; i ++ ) {\r\n                view[ i ] = data.charCodeAt( i );\r\n            }\r\n\r\n            var arrayBuffer = view.buffer;\r\n            return arrayBuffer;\r\n\r\n        } catch ( error ) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var GLTFLoader2 = (GLTFLoader2_GLTFLoader);\r\n\n// CONCATENATED MODULE: ./src/camera/OrthoCamera.js\n\r\n\r\n\r\n\r\nclass OrthoCamera_OrthoCamera {\r\n    constructor(left, right, bottom, top, near, far) {\r\n        this.left = left;\r\n        this._right = right;\r\n        this.bottom = bottom;\r\n        this.top = top;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.position = [0, 0, 10];\r\n        this.target = [0,0,0];\r\n        this.up = [0,1,0];\r\n\r\n        this.VPmatrix = new Matrix4();\r\n\r\n        this.direction = [0,0,-1];\r\n        this.right = [1,0,0];\r\n\r\n        this.updateAll();\r\n    }\r\n\r\n    updateAll(){\r\n        this.updateOption();\r\n        this.updateVPMatrix();\r\n    }\r\n\r\n    updateOption(){\r\n        var targetV3 = new Vector3().fromArray(this.target);\r\n        var positionV3 = new Vector3().fromArray(this.position);\r\n        var upV3 = new Vector3().fromArray(this.up);\r\n\r\n        var directionV3 = new Vector3().subVectors(targetV3, positionV3).normalize();\r\n        this.direction = directionV3.toArray();\r\n\r\n        var rightV3 = new Vector3().crossVectors(directionV3, upV3).normalize();\r\n        this.right = rightV3.toArray();\r\n\r\n        // this.up = new Vector3().crossVectors(rightV3, directionV3).normalize().toArray();\r\n    }\r\n\r\n    setPosition(position){\r\n        this.position = position;\r\n        this.updateAll();\r\n    }\r\n\r\n    setTarget(target){\r\n        this.target = target;\r\n        this.updateAll();\r\n    }\r\n\r\n    setUp(up){\r\n        this.up = new Vector3().fromArray(up).normalize().toArray();\r\n        this.updateAll();\r\n    }\r\n\r\n\r\n\r\n    updateVPMatrix(){\r\n        this.VPmatrix = new Matrix4().setOrtho(this.left, this._right, this.bottom, this.top, this.near, this.far);\r\n        this.VPmatrix.lookAt2(this.position[0],this.position[1],this.position[2], this.target[0],this.target[1],this.target[2], this.up[0],this.up[1],this.up[2]);\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var camera_OrthoCamera = (OrthoCamera_OrthoCamera);\r\n\r\n\n// CONCATENATED MODULE: ./src/material/CubeTexture.js\n\r\n\r\nclass CubeTexture_CubeTexture extends material_Texture{\r\n    constructor(param) {\r\n        super(param);\r\n\r\n        param = param || {};\r\n        this.urls = param.urls;\r\n\r\n        this.images = [];\r\n        this.imgLoadCount = 0;\r\n        this.imgReady = false;\r\n\r\n        var that = this;\r\n        var urls = this.urls;\r\n        for(var i in urls){\r\n            var image = new Image();\r\n            that.images.push(image);\r\n            image.addEventListener('load', function() {\r\n                that.imgLoadCount ++;\r\n                if(that.imgLoadCount == 6){\r\n                    that.imgReady = true;\r\n                }\r\n            });\r\n            image.src = urls[i];\r\n        }\r\n\r\n    }\r\n\r\n    clone(){\r\n\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var material_CubeTexture = (CubeTexture_CubeTexture);\r\n\n// CONCATENATED MODULE: ./src/main.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import _GLTFLoader from \"./core/GLTFLoader\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar main_COOL = window.COOL = {};\r\n\r\nmain_COOL.LINEAR = 9729;\r\nmain_COOL.NEAREST = 9728;\r\n\r\nmain_COOL.CLAMP_TO_EDGE = 33071;\r\nmain_COOL.REPEAT = 10497;\r\nmain_COOL.MIRRORED_REPEAT = 33648;\r\n\r\nmain_COOL.Renderer = core_Renderer;\r\nmain_COOL.Mesh = core_Mesh;\r\nmain_COOL.Camera = camera_Camera;\r\nmain_COOL.OrthoCamera = camera_OrthoCamera;\r\nmain_COOL.CameraController = camera_CameraController;\r\nmain_COOL.Scene = core_Scene;\r\nmain_COOL.Material = material_Material;\r\nmain_COOL.MeshBasicMaterial = material_MeshBasicMaterial;\r\nmain_COOL.MeshLambertMaterial = material_MeshLambertMaterial;\r\nmain_COOL.MeshStandardMaterial = material_MeshStandardMaterial;\r\n\r\nmain_COOL.Texture = material_Texture;\r\nmain_COOL.CubeTexture = material_CubeTexture;\r\n\r\nmain_COOL.AmbientLight = light_AmbientLight;\r\nmain_COOL.DirectionalLight = light_DirectionalLight;\r\n\r\nmain_COOL.Geometry = core_Geometry;\r\nmain_COOL.BoxGeometry = core_BoxGeometry;\r\nmain_COOL.SphereGeometry = core_SphereGeometry;\r\n\r\n// COOL.GLTFLoader = _GLTFLoader;\r\nmain_COOL.GLTFLoader2 = GLTFLoader2;\r\n\r\nmain_COOL.Vector2 = Vector2;\r\nmain_COOL.Vector3 = Vector3;\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);